/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * acompanhamentoPesagemUsuarioIncineracao.java
 *
 * Created on 11/02/2010, 11:12:20
 */

package RelatorioForm;

import RelatorioJava.acompanhamentoUsuarioInci;
import javax.swing.text.MaskFormatter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import auxiliar.*;

/**
 *
 * @author ayrton monier
 */
public class acompanhamentoPesagemUsuarioIncineracao extends javax.swing.JFrame {

    MaskFormatter formData, formDataCadastro;
    private conexao con_incineracao;
    private String dataFormatadataJTable, dataFormatadaAreaTexto;
    //private String usuario;
    public static String periodoInicial, periodoFinal, residuo, turno, maquina, gravadoExcluido; //G = GRAVADO
    //private String ordenacao;
    private boolean pesquise = true;

    /** Creates new form acompanhamentoPesagemUsuarioIncineracao */
    public acompanhamentoPesagemUsuarioIncineracao() {
        initComponents();

        if(validaLogin.USUARIO.equals("Gerente")){
            tipoRegistro.setVisible(false);
            lb_reg.setVisible(false);
        }

        gravadoExcluido = "G";

        con_incineracao = new conexao();
        con_incineracao.conecta();

        novoRelatorio();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgOpcoes = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btNovoRelatorio = new javax.swing.JButton();
        acompanhaBomb = new javax.swing.JButton();
        btConfirmaBusca = new javax.swing.JButton();
        btImprimir = new javax.swing.JButton();
        btAtualiza = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        operador = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        matriculaUsuarioInci = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        consultaHoje = new javax.swing.JRadioButton();
        consultaCompleta = new javax.swing.JRadioButton();
        consultaDiaPeriodo = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoDe = new JFormattedTextField(formData);
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoA = new JFormattedTextField(formData);
        a = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        try{
            formDataCadastro = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        dataCadastro = new JFormattedTextField(formDataCadastro);
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        Maquina = new javax.swing.JComboBox();
        tipoResiduo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Turno = new javax.swing.JComboBox();
        btSair = new javax.swing.JButton();
        scrollTabInci = new javax.swing.JScrollPane();
        tabelaInci = new javax.swing.JTable();
        qtBombPesada = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        lb_reg = new javax.swing.JLabel();
        tipoRegistro = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Acompanhamento de incineração de resíduos por operador - Sistema Serquip 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 17));
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/acompanhamentoInci.png"))); // NOI18N
        jLabel1.setText("Acompanhamento de INCINERAÇÃO DE RESÍDUOS por operador");

        btNovoRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo_relatorio.png"))); // NOI18N
        btNovoRelatorio.setToolTipText("Nova consulta");
        btNovoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoRelatorioActionPerformed(evt);
            }
        });

        acompanhaBomb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/acompanhamento.png"))); // NOI18N
        acompanhaBomb.setToolTipText("Acompanhar pesagem de bombonas por este operador");
        acompanhaBomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acompanhaBombActionPerformed(evt);
            }
        });

        btConfirmaBusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ok.png"))); // NOI18N
        btConfirmaBusca.setToolTipText("Confirmar consulta");
        btConfirmaBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmaBuscaActionPerformed(evt);
            }
        });

        btImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        btImprimir.setToolTipText("Imprimir");
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });

        btAtualiza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/atualiza.png"))); // NOI18N
        btAtualiza.setToolTipText("Atualizar");
        btAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizaActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Operador"));

        operador.setEditable(false);
        operador.setFont(new java.awt.Font("Tahoma", 1, 14));
        operador.setToolTipText("Digite o contrato se o campo estiver habilitado");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operador, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(operador)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Matricula"));

        matriculaUsuarioInci.setFont(new java.awt.Font("Tahoma", 1, 14));
        matriculaUsuarioInci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaUsuarioInciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matriculaUsuarioInci, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(matriculaUsuarioInci, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções de acompanhamento de incineração"));

        consultaHoje.setBackground(new java.awt.Color(204, 204, 204));
        bgOpcoes.add(consultaHoje);
        consultaHoje.setText("Consultar incineração de hoje");
        consultaHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaHojeActionPerformed(evt);
            }
        });

        consultaCompleta.setBackground(new java.awt.Color(204, 204, 204));
        bgOpcoes.add(consultaCompleta);
        consultaCompleta.setSelected(true);
        consultaCompleta.setText("Consultar um operador");
        consultaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaCompletaActionPerformed(evt);
            }
        });

        consultaDiaPeriodo.setBackground(new java.awt.Color(204, 204, 204));
        bgOpcoes.add(consultaDiaPeriodo);
        consultaDiaPeriodo.setText("Consultar dia ou período de incineração");
        consultaDiaPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaDiaPeriodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consultaCompleta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(consultaDiaPeriodo)
                .addGap(27, 27, 27)
                .addComponent(consultaHoje)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaCompleta)
                    .addComponent(consultaHoje)
                    .addComponent(consultaDiaPeriodo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Dia ou período da consulta"));

        periodoDe.setToolTipText("Digite a data inicial da pesquisa");
        periodoDe.setFont(new java.awt.Font("Tahoma", 1, 12));
        periodoDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodoDeActionPerformed(evt);
            }
        });

        periodoA.setEditable(false);
        periodoA.setToolTipText("Se habilitado digite a data final da consulta");
        periodoA.setFont(new java.awt.Font("Tahoma", 1, 12));

        a.setText("a:");
        a.setToolTipText("Adiciona a data final da consulta");
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(periodoDe, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodoDe, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a)
                    .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Data de cadastro"));

        dataCadastro.setEditable(false);
        dataCadastro.setToolTipText("Digite a data inicial da pesquisa");
        dataCadastro.setFont(new java.awt.Font("Tahoma", 1, 12));
        dataCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(dataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções do filtro de consulta"));

        jLabel7.setText("Tipo de resíduo:");

        Maquina.setFont(new java.awt.Font("Tahoma", 1, 12));
        Maquina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Maquina 1", "Maquina 2", "Maquina 3" }));
        Maquina.setToolTipText("Escolha uma das capacidades ou todas");
        Maquina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaquinaActionPerformed(evt);
            }
        });

        tipoResiduo.setFont(new java.awt.Font("Tahoma", 1, 12));
        tipoResiduo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Biologico", "Industrial" }));
        tipoResiduo.setToolTipText("Escolha bombonas de contrato ou extra");
        tipoResiduo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoResiduoActionPerformed(evt);
            }
        });

        jLabel6.setText("Máquina:");

        jLabel5.setText("Turno:");

        Turno.setFont(new java.awt.Font("Tahoma", 1, 12));
        Turno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia completo", "Manha", "Tarde", "Noite" }));
        Turno.setToolTipText("Escolha um dos turnos ou o dia completo");
        Turno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TurnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(49, 49, 49))
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                .addGap(4, 4, 4)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoResiduo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 124, Short.MAX_VALUE)
                    .addComponent(Turno, javax.swing.GroupLayout.Alignment.TRAILING, 0, 124, Short.MAX_VALUE)
                    .addComponent(Maquina, 0, 124, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(Turno, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Maquina, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(tipoResiduo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sair.png"))); // NOI18N
        btSair.setToolTipText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        tabelaInci.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código car.", "Peso", "Tipo de Resíduo", "Máquina", "Data", "Turno", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollTabInci.setViewportView(tabelaInci);

        qtBombPesada.setEditable(false);
        qtBombPesada.setFont(new java.awt.Font("Tahoma", 1, 14));
        qtBombPesada.setForeground(new java.awt.Color(255, 0, 0));
        qtBombPesada.setBorder(javax.swing.BorderFactory.createTitledBorder("Campo de retorno de valor"));

        jLabel22.setText("Qtd. carr. Inciner.:");

        lb_reg.setText("Reg.:");

        tipoRegistro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gravados", "Excluídos" }));
        tipoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(lb_reg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btConfirmaBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btNovoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAtualiza, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(acompanhaBomb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qtBombPesada, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTabInci, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_reg))
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btSair, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(acompanhaBomb, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(btImprimir, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(btAtualiza, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(btNovoRelatorio, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(btConfirmaBusca, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(qtBombPesada, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTabInci, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void btNovoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoRelatorioActionPerformed
        novoRelatorio();
}//GEN-LAST:event_btNovoRelatorioActionPerformed

    private void acompanhaBombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acompanhaBombActionPerformed
        try{
            String matriculaUser = matriculaUsuarioInci.getText().toString();

            con_incineracao.executeSQL("select count(contrato) as 'total bombonas' from cad_bombona where matricula_usuario = '"+matriculaUsuarioInci.getText().toString()+"'");
            con_incineracao.resultset.first();

            int qtBomb = con_incineracao.resultset.getInt("total bombonas");

            if(qtBomb == 0){
                JOptionPane.showMessageDialog(null, "Usuário ainda não efetuou pesagem de bombona", "Aviso", JOptionPane.WARNING_MESSAGE);

            }
            else if(qtBomb > 0){

                acompanhamentoPesagemUsuarioBombona acompanhaUsuarioBomb = new acompanhamentoPesagemUsuarioBombona();

                acompanhaUsuarioBomb.acompanhaInci.setVisible(false);

                acompanhaUsuarioBomb.matriculaUsuarioBomb.setText(matriculaUser);

                acompanhaUsuarioBomb.pesquisaUsuarioBomb();

                acompanhaUsuarioBomb.validaCampos();

                acompanhaUsuarioBomb.configuraParaPesquisa();

                acompanhaUsuarioBomb.setVisible(true);

            }

            //depois da pesquisa atualiza o resultset
            atualizaResultset();
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível mostrar o acompanhamento deste operador.\nErro: "+e);
            atualizaResultset();
        }
}//GEN-LAST:event_acompanhaBombActionPerformed

    private void btConfirmaBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmaBuscaActionPerformed
        validaCampos();
        configuraParaPesquisa();
}//GEN-LAST:event_btConfirmaBuscaActionPerformed

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
        new acompanhamentoUsuarioInci();
}//GEN-LAST:event_btImprimirActionPerformed

    private void btAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizaActionPerformed
        //atualiza pesquisa
        atualizaPesquisa();
}//GEN-LAST:event_btAtualizaActionPerformed

    private void consultaHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaHojeActionPerformed
        consultaHoje();
}//GEN-LAST:event_consultaHojeActionPerformed

    private void consultaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaCompletaActionPerformed
        consultaCompleta();
}//GEN-LAST:event_consultaCompletaActionPerformed

    private void consultaDiaPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaDiaPeriodoActionPerformed
        consultaDiaPeriodo();
}//GEN-LAST:event_consultaDiaPeriodoActionPerformed

    private void periodoDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodoDeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_periodoDeActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        if(a.isSelected()){
            periodoA.setEditable(false);
            periodoA.setText("");
            a.setSelected(false);
        } else{
            periodoA.setEditable(true);
            periodoA.requestFocus();
            a.setSelected(true);
        }
}//GEN-LAST:event_aActionPerformed

    private void dataCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCadastroActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dataCadastroActionPerformed

    private void MaquinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaquinaActionPerformed

}//GEN-LAST:event_MaquinaActionPerformed

    private void tipoResiduoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoResiduoActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tipoResiduoActionPerformed

    private void TurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TurnoActionPerformed

}//GEN-LAST:event_TurnoActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_incineracao.desconecta();
            dispose();
        } else
            return;
}//GEN-LAST:event_btSairActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_incineracao.desconecta();
            dispose();
        } else
            return;
    }//GEN-LAST:event_formWindowClosing

    private void matriculaUsuarioInciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaUsuarioInciActionPerformed
        pesquisaUsuarioInci();
    }//GEN-LAST:event_matriculaUsuarioInciActionPerformed

    private void tipoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoRegistroActionPerformed
        if(tipoRegistro.getSelectedItem().toString().equals("Gravados"))
            gravadoExcluido = "G";
        else
            gravadoExcluido = "E";
}//GEN-LAST:event_tipoRegistroActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new acompanhamentoPesagemUsuarioIncineracao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox Maquina;
    public static javax.swing.JComboBox Turno;
    public static javax.swing.JButton a;
    public javax.swing.JButton acompanhaBomb;
    private javax.swing.ButtonGroup bgOpcoes;
    public static javax.swing.JButton btAtualiza;
    public static javax.swing.JButton btConfirmaBusca;
    public static javax.swing.JButton btImprimir;
    public static javax.swing.JButton btNovoRelatorio;
    public static javax.swing.JButton btSair;
    private javax.swing.JRadioButton consultaCompleta;
    private javax.swing.JRadioButton consultaDiaPeriodo;
    private javax.swing.JRadioButton consultaHoje;
    public static javax.swing.JFormattedTextField dataCadastro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lb_reg;
    public static javax.swing.JTextField matriculaUsuarioInci;
    public static javax.swing.JTextField operador;
    public static javax.swing.JFormattedTextField periodoA;
    public static javax.swing.JFormattedTextField periodoDe;
    private javax.swing.JTextField qtBombPesada;
    private javax.swing.JScrollPane scrollTabInci;
    public static javax.swing.JTable tabelaInci;
    private javax.swing.JComboBox tipoRegistro;
    public static javax.swing.JComboBox tipoResiduo;
    // End of variables declaration//GEN-END:variables

public void preencherTabela(){

//acompanhamentoBombona.tabelaInci.getColumnModel().getColumn(0).setPreferredWidth(20); ajusta largura das colunas

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaInci.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

    try {

        con_incineracao.resultset.first();

        do{
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela
                formataDataBancoParaJTable(con_incineracao.resultset.getString("data_incineracao"));

                //vai add linhas
                //equivale a uma linha na minha tabela Bombona
                modelo.addRow(new Object[]{con_incineracao.resultset.getString("num_seq_incineracao"),//codigo car
                                           con_incineracao.resultset.getInt("peso_incinerado"),      //peso
                                           con_incineracao.resultset.getString("tipo_residuo"),//tipo de residuo
                                           con_incineracao.resultset.getString("id_maquina"),//maquina
                                           dataFormatadataJTable,//data
                                           con_incineracao.resultset.getString("turno_incineracao"),//turno
                                           con_incineracao.resultset.getString("hora_incineracao")});//hora

        }while(con_incineracao.resultset.next());//enquanto tiver dados preenche o jtable com os valores

        //depois que finaliza atualiza o resultset
        atualizaResultset();
    }

    catch (Exception e) {

         JOptionPane.showMessageDialog(null, "Não consta dados nesta data/período ou com as especificações do filtro", "Aviso", JOptionPane.WARNING_MESSAGE);

            //bt atualiza fica inabilitado
            btAtualiza.setEnabled(false);

            //habilita botao imprimir
            btImprimir.setEnabled(false);

            //habilita botao imprimir
            acompanhaBomb.setEnabled(true);

            //bt confirmaBusca é habilitado
            btConfirmaBusca.setEnabled(true);

            //btNovo relatorio e´habilitado
            btNovoRelatorio.setEnabled(true);

    }
}//fim preencher tabela

public void formataDataBancoParaJTable(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTable = dia+"-"+mes+"-"+ano;

}//fim convert area text

public void formataDataBancoParaAreaTexto(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadaAreaTexto = dia+mes+ano;

}//fim convert area text

public void atualizaResultset(){
    try{
    //atualiza o resultset
    con_incineracao.executeSQL("select * from incineracao where (id_maquina = "+maquina+") and (turno_incineracao = "+turno+") and (data_incineracao between '"+periodoInicial+"' and '"+periodoFinal+"') and (tipo_residuo = "+residuo+") and (situacao_reg = '"+gravadoExcluido+"') and matricula_usuario = '"+matriculaUsuarioInci.getText()+"' order by num_seq_incineracao");
    con_incineracao.resultset.first();

    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null, "ATUALIZAÇÃO NÃO EFETUADA", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}//fim atualiza resultset

public void consultaCompleta(){
    limpaCampos();

    //foco para o campo matricula
    matriculaUsuarioInci.requestFocus();

    //inabilita objetos de periodo de pesquisa
    periodoDe.setEditable(false);
    periodoA.setEditable(false);
    a.setEnabled(false);


}

public void consultaDiaPeriodo(){

limpaCampos();

periodoDe.setEditable(true);
a.setEnabled(true);
periodoA.setEditable(false);


matriculaUsuarioInci.requestFocus();
}

public void consultaHoje(){

limpaCampos();

periodoDe.setEditable(false);
periodoA.setEditable(false);
a.setEnabled(false);

matriculaUsuarioInci.requestFocus();

}

public void limpaCampos(){

    maquina = "";
    residuo = "";
    turno = "";

    matriculaUsuarioInci.setText("");
    operador.setText("");
    dataCadastro.setText("");
    periodoDe.setText("");
    periodoA.setText("");
    qtBombPesada.setText("");

      //habilita botao imprimir
    btImprimir.setEnabled(false);

    btAtualiza.setEnabled(false);

    acompanhaBomb.setEnabled(false);

    Turno.setSelectedItem("Dia completo");
    Maquina.setSelectedItem("Todas");
    tipoResiduo.setSelectedItem("Todas");

    limpaJtable();

}

public void limpaJtable(){

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaInci.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

}//LIMPA JTABLE

//METODO QUE VAI VER SE OS CAMPOS ESTAO CERTINHOS PARA BUSCA
public void validaCampos(){
pesquise = false;
String msg = "";

//se acompanhar por contrato for selecionado
if(consultaCompleta.isSelected() || consultaHoje.isSelected()){

        if(matriculaUsuarioInci.getText().isEmpty()){
            msg = "Informe a matrícula do operador.";
            matriculaUsuarioInci.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else
            pesquise = true;

}//fim se consulta completa for selecionado

//se acompanhar dia ou periodo de pesagem for selecionado
else if(consultaDiaPeriodo.isSelected()){

        if(matriculaUsuarioInci.getText().isEmpty()){
            msg = "Informe a matrícula do operador.";
            matriculaUsuarioInci.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        //se data inicial nao for preenchida
        else if(periodoDe.getText().equals("  -  -    ")){
            msg = "Informe a data inicial da pesquisa.";
            periodoDe.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        else if(periodoA.isEditable() && periodoA.getText().equals("  -  -    ")){
            msg = "Informe a data final da pesquisa";
            periodoA.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(consultaCompleta.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");
                if(pesquise == true)
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
            else if(consultaDiaPeriodo.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");

                if(pesquise == true && periodoA.isEditable())
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
           else
                testaData(periodoDe.getText(), "data inicial da pesquisa");
        }
}//fim se acompanhar por dia periodo

//FIM VALIDAR CAMPOS : SE OS CAMPOS ESTIVEREM CORRETOS A VARIÁVEL PESQUISE VAI RECEBER TRUE



}//fim validaCampos

public void testaData(String data, String nomeCampo){
            pesquise = true;
String dia, mes, ano;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);

Data.le_data();

//imperfeições na data
            if(Integer.parseInt(dia) < 1 || Integer.parseInt(dia) > 31){
                JOptionPane.showMessageDialog(null, "O dia deve ser de 1 a 31 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(mes) < 1 || Integer.parseInt(mes) > 12){

                JOptionPane.showMessageDialog(null, "O mês deve ser de 1 a 12 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(dia) > Data.DIA && Integer.parseInt(mes) == Data.MES && Integer.parseInt(ano) == Data.ANO){

                JOptionPane.showMessageDialog(null, "O dia digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }

            else if(Integer.parseInt(dia) == Data.DIA && Integer.parseInt(mes) > Data.MES && Integer.parseInt(ano) == Data.ANO+1900){

                JOptionPane.showMessageDialog(null, "O mês digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(ano) <= 2000){

                JOptionPane.showMessageDialog(null, "O ano deve ser maior que 2000 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else
                pesquise = true;


}

public void configuraParaPesquisa(){

    if(pesquise == true){

                //habilita botao imprimir
                btImprimir.setEnabled(true);

                //habilita atualizar
                btAtualiza.setEnabled(true);

                //habilita botao imprimir
                acompanhaBomb.setEnabled(true);

            //SE CONSULTA COMPLETA FOR SELECIONADA
            if(consultaCompleta.isSelected()){
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoA.getText(), "data final da pesquisa");
            }
            //SE CONSULTA POR DIA OU PERIODO FOR SELECIONADA
            else if(consultaDiaPeriodo.isSelected()){
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                if(periodoA.isEditable())
                    formataDataBanco(periodoA.getText(), "data final da pesquisa");
                else
                    formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }
            //SE CONSULTA HOJE FOR SELECIONADA
            else{
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }
                //se TURNO selecionado for MANHA
                if(Turno.getSelectedItem().toString().equals("Manha"))
                    turno = "'Manha'";

                //se TURNO selecionado for TARDE
                else if(Turno.getSelectedItem().toString().equals("Tarde"))
                    turno = "'Tarde'";

                //se TURNO selecionado for NOITE
                else if(Turno.getSelectedItem().toString().equals("Noite"))
                    turno = "'Noite'";

                //se TURNO selecionado for DIA COMPLETO
                else
                    turno = "'Manha' or turno_incineracao = 'Tarde' or turno_incineracao = 'Noite'";


                //se CAPACIDADE DA BOMBONA selecionado for 200 litros
                if(Maquina.getSelectedItem().toString().equals("Maquina 1"))
                    maquina = "1";

                //se CAPACIDADE DA BOMBONA selecionado for 50 litros
                else if(Maquina.getSelectedItem().toString().equals("Maquina 2"))
                    maquina = "2";

                //se CAPACIDADE DA BOMBONA selecionado for 20 litros
                else if(Maquina.getSelectedItem().toString().equals("Maquina 3"))
                    maquina = "3";

                //se CAPACIDADE DA BOMBONA selecionado for 200
                else
                    maquina = "1 or id_maquina = 2 or id_maquina = 3";


                //se TIPO DE BOMBONA selecionado for CONTRATO litros
                if(tipoResiduo.getSelectedItem().toString().equals("Biologico"))
                    residuo = "'Biologico'";

                //se TIPO DE BOMBONA selecionado for EXTRA litros
                else if(tipoResiduo.getSelectedItem().toString().equals("Industrial"))
                    residuo = "'Industrial'";

                //se TIPO DE BOMBONA selecionado for TODOS litros
                else
                    residuo = "'Biologico' or tipo_residuo = 'Industrial'";


//               //teste
//               JOptionPane.showMessageDialog(null, "MATRICULA: "+matricula.getText()+"\n" +
//                                                    "DATA INICIAL: "+periodoInicial+"\n" +
//                                                    "DATA FINAL: "+periodoFinal+"\n" +
//                                                    "TURNO: "+turno+"\n" +
//                                                    "TIPO DE RESÍDUO: "+residuo+"\n" +
//                                                    "MAQUINA: "+maquina);



                atualizaPainelDetalhado();
                preencherTabela();

    }//fim se pesquise == true


}//fim configura pesquisa

public void atualizaPainelDetalhado(){
String sql;
                try{
                //Quantidade de bombonas pesadas
                sql = "select count(num_seq_incineracao) as 'qtCarrinho' from incineracao where (id_maquina = "+maquina+") and (turno_incineracao = "+turno+") and (data_incineracao between '"+periodoInicial+"' and '"+periodoFinal+"') and (tipo_residuo = "+residuo+") and (situacao_reg = '"+gravadoExcluido+"') and matricula_usuario = "+matriculaUsuarioInci.getText()+" order by num_seq_incineracao";
                con_incineracao.executeSQL(sql);
                con_incineracao.resultset.first();
                qtBombPesada.setText(con_incineracao.resultset.getString("qtCarrinho"));

                atualizaResultset();

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Quantidade de carrinhos incinerados não atualizado.\nErro: "+e);
                }
}//fim atualiza painel detalhado

public void atualizaPesquisa(){

        configuraParaPesquisa();
        atualizaPainelDetalhado();
        preencherTabela();
}
//formata data para gravar no banco
public void formataDataBanco(String data, String nomeCampo){
int n = 0;
String dia, mes, ano, dataFormatada;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);


        dataFormatada = ano+"-"+mes+"-"+dia;

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoInicial = dataFormatada;
                else if(nomeCampo.equals("data final da pesquisa"))
                    periodoFinal = dataFormatada;
                else
                    JOptionPane.showMessageDialog(null, "nome do campo nao confere");



}//fim convertData

public void novoRelatorio(){

        periodoInicial = "";
        periodoFinal = "";

        //nao altoriza para configurar a pesquisa
        pesquise = false;

        limpaCampos();
        consultaCompleta();

        //seleciona acompanhar por contrato
        consultaCompleta.setSelected(true);

        matriculaUsuarioInci.requestFocus();


}//FIM NOVO RELATORIO

public void pesquisaUsuarioInci(){
            //data de hoje
            Data.le_data();

            try{
            con_incineracao.executeSQL("select * from usuario where matricula_usuario = '"+matriculaUsuarioInci.getText().toString()+"'");
            con_incineracao.resultset.first();

            String nome = con_incineracao.resultset.getString("nome_usuario");
            String dataCad = con_incineracao.resultset.getString("data_cad_usuario");
            //pega o nome, codigo e o total de bombona de contrato do cliente
            operador.setText(nome);

            //formata a data de cadastro do usuario que esta no banco e passa para area de texto no formato dd/mm/aaaa
            formataDataBancoParaAreaTexto(dataCad);
            
            dataCadastro.setText(dataFormatadaAreaTexto);

            if(consultaCompleta.isSelected()){
                periodoDe.setText(dataFormatadaAreaTexto);
                periodoA.setText(Data.dataAtualJFormatted);
            }
            if(consultaDiaPeriodo.isSelected())
               periodoDe.requestFocus();

            if(consultaHoje.isSelected())
                periodoDe.setText(Data.dataAtualJFormatted);

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Matrícula não confere, tente outra vez", "Aviso", JOptionPane.WARNING_MESSAGE);
                matriculaUsuarioInci.setText("");
                matriculaUsuarioInci.requestFocus();
            }
}

}//fim classe


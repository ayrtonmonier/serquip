/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * logUsuario.java
 *
 * Created on 11/02/2010, 10:56:54
 */

package RelatorioForm;
import RelatorioJava.acompanhamentoUsuarioBomb;
import RelatorioJava.acompanhamentoUsuarioLogGeral;
import RelatorioJava.acompanhamentoUsuarioLogInd;
import javax.swing.text.MaskFormatter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import auxiliar.*;
/**
 *
 * @author ayrton monier
 */
public class logUsuario extends javax.swing.JFrame {

    MaskFormatter formData, formDataCadastro;
    private conexao con_log = new conexao();
    private String dataFormatadataJTableLogin, dataFormatadataJTableLogout, dataFormatadaAreaTexto;
    //private String usuario;
    public static String periodoInicial, periodoFinal, tipo, pesagem, situacaoLogout, turno, tipoDeUsuario;
    //private String ordenacao;
    private boolean pesquise = true;

    public static String matricula;

    /** Creates new form logUsuario */
    public logUsuario() {
        initComponents();

        con_log.conecta();

       novoRelatorio();
       
       //mostra logo uma cnosulta completa
       consultaCompletaLogs();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        qtdLogUsuario = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        usuario = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        matriculaUsuario = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        consultaHoje = new javax.swing.JRadioButton();
        consultaUsuario = new javax.swing.JRadioButton();
        consultaDiaPeriodo = new javax.swing.JRadioButton();
        listaLogs = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoDe = new JFormattedTextField(formData);
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoA = new JFormattedTextField(formData);
        a = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        try{
            formDataCadastro = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        dataCadastro = new JFormattedTextField(formDataCadastro);
        jPanel6 = new javax.swing.JPanel();
        situacaoLog = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Turno = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        tipoUsuario = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaBombona = new javax.swing.JTable();
        btConfirmaBusca = new javax.swing.JButton();
        btNovoRelatorio = new javax.swing.JButton();
        btAtualiza = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        btImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Log de usuário - Sistema Serquip 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        qtdLogUsuario.setEditable(false);
        qtdLogUsuario.setFont(new java.awt.Font("Tahoma", 1, 14));
        qtdLogUsuario.setForeground(new java.awt.Color(255, 0, 0));
        qtdLogUsuario.setBorder(javax.swing.BorderFactory.createTitledBorder("Campo de retorno de valor"));

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Usuário"));
        jPanel11.setToolTipText("");

        usuario.setEditable(false);
        usuario.setFont(new java.awt.Font("Tahoma", 1, 14));
        usuario.setToolTipText("Digite o contrato se o campo estiver habilitado");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usuario, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(usuario)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Matricula"));

        matriculaUsuario.setFont(new java.awt.Font("Tahoma", 1, 14));
        matriculaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matriculaUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(matriculaUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções de acompanhamento de log de usuário"));

        consultaHoje.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(consultaHoje);
        consultaHoje.setText("Consultar logs de hoje");
        consultaHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaHojeActionPerformed(evt);
            }
        });

        consultaUsuario.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(consultaUsuario);
        consultaUsuario.setSelected(true);
        consultaUsuario.setText("Consultar logs de usuário");
        consultaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaUsuarioActionPerformed(evt);
            }
        });

        consultaDiaPeriodo.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(consultaDiaPeriodo);
        consultaDiaPeriodo.setText("Consultar dia ou período de log");
        consultaDiaPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaDiaPeriodoActionPerformed(evt);
            }
        });

        listaLogs.setBackground(new java.awt.Color(204, 204, 204));
        buttonGroup1.add(listaLogs);
        listaLogs.setText("Consultar lista completa de logs");
        listaLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaLogsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consultaUsuario)
                .addGap(18, 18, 18)
                .addComponent(consultaDiaPeriodo)
                .addGap(18, 18, 18)
                .addComponent(consultaHoje)
                .addGap(18, 18, 18)
                .addComponent(listaLogs)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaUsuario)
                    .addComponent(consultaDiaPeriodo)
                    .addComponent(consultaHoje)
                    .addComponent(listaLogs))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Dia ou período da consulta"));

        periodoDe.setToolTipText("Digite a data inicial da pesquisa");
        periodoDe.setFont(new java.awt.Font("Tahoma", 1, 12));
        periodoDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodoDeActionPerformed(evt);
            }
        });

        periodoA.setEditable(false);
        periodoA.setToolTipText("Se habilitado digite a data final da consulta");
        periodoA.setFont(new java.awt.Font("Tahoma", 1, 12));

        a.setText("a:");
        a.setToolTipText("Adiciona a data final da consulta");
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(periodoDe, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(periodoDe, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(a))
        );

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Data de cadastro"));

        dataCadastro.setEditable(false);
        dataCadastro.setToolTipText("Digite a data inicial da pesquisa");
        dataCadastro.setFont(new java.awt.Font("Tahoma", 1, 12));
        dataCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(dataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções do filtro de consulta"));

        situacaoLog.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        situacaoLog.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Troca usuario", "Segura (enter)", "Segura (clique)", "Erro senha (troca)", "Erro senha (desbloq.)" }));
        situacaoLog.setToolTipText("Escolha uma das capacidades ou todas");
        situacaoLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                situacaoLogActionPerformed(evt);
            }
        });

        jLabel6.setText("Sit. Logout:");

        jLabel5.setText("Turno:");

        Turno.setFont(new java.awt.Font("Tahoma", 1, 12));
        Turno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia completo", "Manha", "Tarde", "Noite" }));
        Turno.setToolTipText("Escolha um dos turnos ou o dia completo");
        Turno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TurnoActionPerformed(evt);
            }
        });

        jLabel7.setText("T. Usuário:");

        tipoUsuario.setFont(new java.awt.Font("Tahoma", 1, 12));
        tipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Administrador", "Gerente", "Operador" }));
        tipoUsuario.setToolTipText("Escolha um dos turnos ou o dia completo");
        tipoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(5, 5, 5)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoUsuario, javax.swing.GroupLayout.Alignment.TRAILING, 0, 156, Short.MAX_VALUE)
                    .addComponent(situacaoLog, 0, 156, Short.MAX_VALUE)
                    .addComponent(Turno, javax.swing.GroupLayout.Alignment.TRAILING, 0, 156, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addComponent(Turno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(tipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(situacaoLog, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))))
                .addContainerGap())
        );

        tabelaBombona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número do log", "Matrícula", "Tipo de usuário", "Situação usuário", "IP do pc", "Data do login", "Turno do login", "Hora login", "Data logout", "Hora logout", "Situação logout"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaBombona);

        btConfirmaBusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ok.png"))); // NOI18N
        btConfirmaBusca.setToolTipText("Confirmar consulta");
        btConfirmaBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmaBuscaActionPerformed(evt);
            }
        });

        btNovoRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo_relatorio.png"))); // NOI18N
        btNovoRelatorio.setToolTipText("Nova consulta");
        btNovoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoRelatorioActionPerformed(evt);
            }
        });

        btAtualiza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/atualiza.png"))); // NOI18N
        btAtualiza.setToolTipText("Atualizar");
        btAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizaActionPerformed(evt);
            }
        });

        btSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sair.png"))); // NOI18N
        btSair.setToolTipText("Sair da tela de relatório");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        jLabel22.setText("Qtd. de logs:");

        btImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        btImprimir.setToolTipText("Imprimir");
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btConfirmaBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btNovoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAtualiza, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 565, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qtdLogUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btSair, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btImprimir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btAtualiza, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btNovoRelatorio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btConfirmaBusca, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(qtdLogUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void consultaHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaHojeActionPerformed
        consultaHoje();
}//GEN-LAST:event_consultaHojeActionPerformed

    private void consultaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaUsuarioActionPerformed
        consultaCompleta();
}//GEN-LAST:event_consultaUsuarioActionPerformed

    private void consultaDiaPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaDiaPeriodoActionPerformed
        consultaDiaPeriodo();
}//GEN-LAST:event_consultaDiaPeriodoActionPerformed

    private void periodoDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodoDeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_periodoDeActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        if(a.isSelected()){
            periodoA.setEditable(false);
            periodoA.setText("");
            a.setSelected(false);
        } else{
            periodoA.setEditable(true);
            periodoA.requestFocus();
            a.setSelected(true);
        }
}//GEN-LAST:event_aActionPerformed

    private void dataCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCadastroActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dataCadastroActionPerformed

    private void situacaoLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_situacaoLogActionPerformed

}//GEN-LAST:event_situacaoLogActionPerformed

    private void TurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TurnoActionPerformed

}//GEN-LAST:event_TurnoActionPerformed

    private void btConfirmaBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmaBuscaActionPerformed
        validaCampos();
        configuraParaPesquisa();
}//GEN-LAST:event_btConfirmaBuscaActionPerformed

    private void btNovoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoRelatorioActionPerformed
        novoRelatorio();
}//GEN-LAST:event_btNovoRelatorioActionPerformed

    private void btAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizaActionPerformed
        //atualiza pesquisa
        atualizaPesquisa();
}//GEN-LAST:event_btAtualizaActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_log.desconecta();
            dispose();
        } else
            return;
}//GEN-LAST:event_btSairActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_log.desconecta();
            dispose();
        } else
            return;
    }//GEN-LAST:event_formWindowClosing

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
        if(matriculaUsuario.isEditable())
            new acompanhamentoUsuarioLogInd();
        else
            new acompanhamentoUsuarioLogGeral();
    }//GEN-LAST:event_btImprimirActionPerformed

    private void matriculaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaUsuarioActionPerformed
        pesquisaUsuario();
    }//GEN-LAST:event_matriculaUsuarioActionPerformed

    private void listaLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaLogsActionPerformed
        listaLogs();
    }//GEN-LAST:event_listaLogsActionPerformed

    private void tipoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoUsuarioActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new logUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox Turno;
    public static javax.swing.JButton a;
    public static javax.swing.JButton btAtualiza;
    public static javax.swing.JButton btConfirmaBusca;
    private javax.swing.JButton btImprimir;
    public static javax.swing.JButton btNovoRelatorio;
    public static javax.swing.JButton btSair;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton consultaDiaPeriodo;
    private javax.swing.JRadioButton consultaHoje;
    private javax.swing.JRadioButton consultaUsuario;
    public static javax.swing.JFormattedTextField dataCadastro;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton listaLogs;
    public static javax.swing.JTextField matriculaUsuario;
    public static javax.swing.JFormattedTextField periodoA;
    public static javax.swing.JFormattedTextField periodoDe;
    private javax.swing.JTextField qtdLogUsuario;
    public static javax.swing.JComboBox situacaoLog;
    private javax.swing.JTable tabelaBombona;
    public static javax.swing.JComboBox tipoUsuario;
    public static javax.swing.JTextField usuario;
    // End of variables declaration//GEN-END:variables

public void preencherTabela(){

//acompanhamentoBombona.tabelaInci.getColumnModel().getColumn(0).setPreferredWidth(20); ajusta largura das colunas

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaBombona.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

    try {

        con_log.resultset.first();

        do{
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela data login
                formataDataBancoParaJTableLogin(con_log.resultset.getString("data_login"));
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela  data logout
                formataDataBancoParaJTableLogout(con_log.resultset.getString("data_logout"));


                //vai add linhas
                //equivale a uma linha na minha tabela Bombona
                modelo.addRow(new Object[]{con_log.resultset.getString("num_log"),                 // numero do log
                                           con_log.resultset.getString("matricula_usuario"),       //matricula do usuario
                                           con_log.resultset.getString("tipo_usuario"),            //tipo de usuario
                                           con_log.resultset.getString("situacao_usuario"),        //situaçãodo usuario
                                           con_log.resultset.getString("host_login"),              //ip da maquina que entrou
                                           dataFormatadataJTableLogin,                             //data login
                                           con_log.resultset.getString("turno_login"),             //turno do login
                                           con_log.resultset.getString("hora_login"),              //hora do login
                                           dataFormatadataJTableLogout,                            //data logout
                                           con_log.resultset.getString("hora_logout"),             //turno
                                           con_log.resultset.getString("situacao_logout")});       //hora logout

        }while(con_log.resultset.next());//enquanto tiver dados preenche o jtable com os valores

        //depois que finaliza atualiza o resultset
        atualizaResultset();
    }

    catch (Exception e) {

         JOptionPane.showMessageDialog(null, "Não consta dados nesta data/período ou com as especificações do filtro", "Aviso", JOptionPane.WARNING_MESSAGE);

            System.out.println("Erro : "+e);

            //bt atualiza fica inabilitado
            btAtualiza.setEnabled(false);

            //habilita botao imprimir
            btImprimir.setEnabled(false);

            //bt confirmaBusca é habilitado
            btConfirmaBusca.setEnabled(true);

            //btNovo relatorio e´habilitado
            btNovoRelatorio.setEnabled(true);

    }
}//fim preencher tabela

public void formataDataBancoParaJTableLogin(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTableLogin = dia+"-"+mes+"-"+ano;

}//fim convert area text

public void formataDataBancoParaJTableLogout(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTableLogout = dia+"-"+mes+"-"+ano;

}//fim convert area text



public void formataDataBancoParaAreaTexto(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadaAreaTexto = dia+mes+ano;

}//fim convert area text

public void atualizaResultset(){
    String sql;
    try{

    sql = "select * from log_usuario where (turno_login = "+turno+") and (data_login between '"+periodoInicial+"' and '"+periodoFinal+"') and (situacao_logout = "+situacaoLogout+") and (tipo_usuario = "+tipoDeUsuario+") and (matricula_usuario = "+matricula+") and (situacao_logout != 'Em execucao...') order by num_log";

    //atualiza o resultset
    con_log.executeSQL(sql);
    con_log.resultset.first();

    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null, "ATUALIZAÇÃO NÃO EFETUADA", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}//fim atualiza resultset

public void consultaCompleta(){
    limpaCampos();

    //foco para o campo matricula
    matriculaUsuario.requestFocus();

    //deixa inailitado
    tipoUsuario.setEnabled(false);

    //inabilita objetos de periodo de pesquisa
    periodoDe.setEditable(false);
    periodoA.setEditable(false);
    a.setEnabled(false);


}

public void listaLogs(){

          Data.le_data();
          limpaCampos();
          matriculaUsuario.setEditable(false);

          try{

                //INABILITA CAMPO MATRÍCULA
                matriculaUsuario.setEditable(false);
                String sql = "select * from log_usuario where (situacao_logout != 'Em execucao...') order by data_login";
                con_log.executeSQL(sql);
                //posiciona no primeiro registro e pega a primeira data de login
                con_log.resultset.first();
                String dataD = con_log.resultset.getString("data_login");
                //formata a data do banco para mostrar na area de texto PERIODO DE
                formataDataBancoParaAreaTexto(dataD);
                periodoDe.setText(dataFormatadaAreaTexto);

                //pega a data atual ja formatada para campo com mascara
                periodoA.setText(Data.dataAtualJFormatted);

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Não consta nenhuma entrada no sistema até o momento");
            }

}

public void consultaDiaPeriodo(){

limpaCampos();

matriculaUsuario.setEditable(false);
periodoDe.setEditable(true);
a.setEnabled(true);
periodoA.setEditable(false);
periodoDe.requestFocus();


}

public void consultaHoje(){
Data.le_data();

limpaCampos();

periodoDe.setEditable(false);
periodoA.setEditable(false);
a.setEnabled(false);
matriculaUsuario.setEditable(false);

periodoDe.setText(Data.dataAtualJFormatted);
}

public void limpaCampos(){

    tipo = "";
    situacaoLogout = "";
    pesagem = "";
    turno = "";
    matriculaUsuario.setEditable(true);
    tipoUsuario.setEnabled(true);
    tipoUsuario.setSelectedItem("Todos");
    matriculaUsuario.setText("");
    usuario.setText("");
    dataCadastro.setText("");
    periodoDe.setText("");
    periodoA.setText("");
    qtdLogUsuario.setText("");

    btImprimir.setEnabled(false);
    btAtualiza.setEnabled(false);

    Turno.setSelectedItem("Dia completo");
    situacaoLog.setSelectedItem("Todas");

    limpaJtable();

}

public void limpaJtable(){

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaBombona.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

}//LIMPA JTABLE

//METODO QUE VAI VER SE OS CAMPOS ESTAO CERTINHOS PARA BUSCA
public void validaCampos(){
pesquise = false;
String msg = "";

//se acompanhar um usuario ou consultar logs de hoje
if(consultaUsuario.isSelected() || consultaHoje.isSelected()){

        if(matriculaUsuario.getText().isEmpty() && matriculaUsuario.isEditable()){
            msg = "Informe a matrícula do usuário";
            matriculaUsuario.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else
            pesquise = true;

}//fim se consulta completa for selecionado

//se acompanhar dia ou periodo de pesagem for selecionado
else if(consultaDiaPeriodo.isSelected() || listaLogs.isSelected()){

        if(matriculaUsuario.getText().isEmpty() && matriculaUsuario.isEditable()){
            msg = "Informe a matrícula do operador";
            matriculaUsuario.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        //se data inicial nao for preenchida
        else if(periodoDe.getText().equals("  -  -    ")){
            msg = "Informe a data inicial da pesquisa.";
            periodoDe.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        else if(periodoA.isEditable() && periodoA.getText().equals("  -  -    ")){
            msg = "Informe a data final da pesquisa";
            periodoA.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(consultaUsuario.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");
                if(pesquise == true)
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
            else if(consultaDiaPeriodo.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");

                if(pesquise == true && periodoA.isEditable())
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
           else if(consultaHoje.isSelected())
                testaData(periodoDe.getText(), "data inicial da pesquisa");

           else
               testaData(periodoDe.getText(), "data inicial da pesquisa");
                   if(pesquise == true)
                        testaData(periodoA.getText(), "data final da pesquisa");

        }
}//fim se acompanhar por dia periodo

//FIM VALIDAR CAMPOS : SE OS CAMPOS ESTIVEREM CORRETOS A VARIÁVEL PESQUISE VAI RECEBER TRUE



}//fim validaCampos

public void testaData(String data, String nomeCampo){
            pesquise = true;
String dia, mes, ano;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);

Data.le_data();

//imperfeições na data
            if(Integer.parseInt(dia) < 1 || Integer.parseInt(dia) > 31){
                JOptionPane.showMessageDialog(null, "O dia deve ser de 1 a 31 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(mes) < 1 || Integer.parseInt(mes) > 12){

                JOptionPane.showMessageDialog(null, "O mês deve ser de 1 a 12 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(dia) > Data.DIA && Integer.parseInt(mes) == Data.MES && Integer.parseInt(ano) == Data.ANO){

                JOptionPane.showMessageDialog(null, "O dia digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }

            else if(Integer.parseInt(dia) == Data.DIA && Integer.parseInt(mes) > Data.MES && Integer.parseInt(ano) == Data.ANO+1900){

                JOptionPane.showMessageDialog(null, "O mês digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(ano) <= 2000){

                JOptionPane.showMessageDialog(null, "O ano deve ser maior que 2000 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else
                pesquise = true;


}

public void configuraParaPesquisa(){

    if(pesquise == true){

                //habilita botao imprimir
                btImprimir.setEnabled(true);

                //habilita atualizar
                btAtualiza.setEnabled(true);


            //SE CONSULTA COMPLETA de usuario FOR SELECIONADA
            if(consultaUsuario.isSelected()){

                matricula = matriculaUsuario.getText();

                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoA.getText(), "data final da pesquisa");

            }
            //SE CONSULTA POR DIA OU PERIODO FOR SELECIONADA
            else if(consultaDiaPeriodo.isSelected()){

                matricula = "matricula_usuario";

                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                if(periodoA.isEditable())
                    formataDataBanco(periodoA.getText(), "data final da pesquisa");
                else
                    formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }
            else if(listaLogs.isSelected()){
               
                matricula = "matricula_usuario";

                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoA.getText(), "data final da pesquisa");
            }
            //SE CONSULTA DE HOJE FOR SELECIONADA
            else{

                matricula = "matricula_usuario";

                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }

                //se TURNO selecionado for MANHA
                if(Turno.getSelectedItem().toString().equals("Manha"))
                    turno = "'Manha'";

                //se TURNO selecionado for TARDE
                else if(Turno.getSelectedItem().toString().equals("Tarde"))
                    turno = "'Tarde'";

                //se TURNO selecionado for NOITE
                else if(Turno.getSelectedItem().toString().equals("Noite"))
                    turno = "'Noite'";

                //se TURNO selecionado for DIA COMPLETO
                else
                    turno = "turno_login";

                //se TURNO selecionado for MANHA
                if(tipoUsuario.getSelectedItem().toString().equals("Administrador"))
                    tipoDeUsuario = "'Administrador'";

                //se TURNO selecionado for TARDE
                else if(tipoUsuario.getSelectedItem().toString().equals("Gerente"))
                    tipoDeUsuario = "'Gerente'";

                //se TURNO selecionado for NOITE
                else if(tipoUsuario.getSelectedItem().toString().equals("Operador"))
                    tipoDeUsuario = "'Operador'";

                //se TURNO selecionado for DIA COMPLETO
                else
                    tipoDeUsuario = "tipo_usuario";

                //se situacaoLogout DA BOMBONA selecionado for 200 litros
                if(situacaoLog.getSelectedItem().toString().equals("Troca usuario"))
                    situacaoLogout = "'Troca usuario'";

                //se situacaoLogout DA BOMBONA selecionado for 50 litros
                else if(situacaoLog.getSelectedItem().toString().equals("Segura (enter)"))
                    situacaoLogout = "'Segura (enter)'";

                //se situacaoLogout DA BOMBONA selecionado for 20 litros
                else if(situacaoLog.getSelectedItem().toString().equals("Segura (clique)"))
                    situacaoLogout = "'Segura (clique)'";

                else if(situacaoLog.getSelectedItem().toString().equals("Erro senha (troca)"))
                    situacaoLogout = "'Erro senha (troca)'";

                else if(situacaoLog.getSelectedItem().toString().equals("Erro senha (desbloq.)"))
                    situacaoLogout = "'Erro senha (desbloq.)'";

                //se situacaoLogout DA BOMBONA selecionado for 200
                else
                    situacaoLogout = "situacao_logout";


               //teste
//               JOptionPane.showMessageDialog(null, "MATRICULA: "+matricula+"\n" +
//                                                    "TIPO DE USUÁRIO: "+tipoDeUsuario+"\n" +
//                                                    "DATA INICIAL: "+periodoInicial+"\n" +
//                                                    "DATA FINAL: "+periodoFinal+"\n" +
//                                                    "TURNO: "+turno+"\n" +
//                                                    "situacaoLogout: "+situacaoLogout);
                                            
                atualizaPainelDetalhado();
                preencherTabela();

    }//fim se pesquise == true


}//fim configura pesquisa

public void atualizaPainelDetalhado(){
String sql;
                try{
                //Quantidade de bombonas pesadas

                sql = "select count(num_log) as 'logs' from log_usuario where (turno_login = "+turno+")  and (data_login between '"+periodoInicial+"' and '"+periodoFinal+"') and (situacao_logout = "+situacaoLogout+") and (tipo_usuario = "+tipoDeUsuario+") and (matricula_usuario = "+matricula+") and (situacao_logout != 'Em execucao...') order by num_log";

                con_log.executeSQL(sql);
                con_log.resultset.first();
                qtdLogUsuario.setText(String.valueOf(con_log.resultset.getInt("logs")));

                atualizaResultset();

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Quantidade de logs não atualizado.\nErro: "+e);
                }
}//fim atualiza painel detalhado

public void atualizaPesquisa(){

        configuraParaPesquisa();
        atualizaPainelDetalhado();
        preencherTabela();
}
//formata data para gravar no banco
public void formataDataBanco(String data, String nomeCampo){
int n = 0;
String dia, mes, ano, dataFormatada;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);


        dataFormatada = ano+"-"+mes+"-"+dia;

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoInicial = dataFormatada;
                else if(nomeCampo.equals("data final da pesquisa"))
                    periodoFinal = dataFormatada;
                else
                    JOptionPane.showMessageDialog(null, "nome do campo nao confere");



}//fim convertData

public void novoRelatorio(){

        periodoInicial = "";
        periodoFinal = "";

        //nao altoriza para configurar a pesquisa
        pesquise = false;

        limpaCampos();
        consultaCompleta();

        //seleciona acompanhar por contrato
        consultaUsuario.setSelected(true);

        //inabilita botoes
        btAtualiza.setEnabled(false);
        btImprimir.setEnabled(false);

        matriculaUsuario.requestFocus();


}//FIM NOVO RELATORIO

public void pesquisaUsuario(){
            //data de hoje
            Data.le_data();

            try{

                con_log.executeSQL("select * from usuario where matricula_usuario = '"+matriculaUsuario.getText()+"'");
                con_log.resultset.first();

                String nomeUser = con_log.resultset.getString("nome_usuario");
                String dataCad = con_log.resultset.getString("data_cad_usuario");
                String tipoUs = con_log.resultset.getString("tipo_de_usuario");

                //formata a data de cadastro do usuario que esta no banco e passa para area de texto no formato dd/mm/aaaa
                formataDataBancoParaAreaTexto(dataCad);

                //data do cadastro
                dataCadastro.setText(dataFormatadaAreaTexto);

                //nome do usuario
                usuario.setText(nomeUser);

                //tipo de usuario
                tipoUsuario.setSelectedItem(tipoUs.toString());

                periodoDe.setText(dataFormatadaAreaTexto);
                periodoA.setText(Data.dataAtualJFormatted);
     

            }//FIM TRY
                //JOptionPane.showMessageDialog(null, "Este usuário ainda não efetuou nenhum login no sistema");
            
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Matrícula não confere, tente outra vez", "Aviso", JOptionPane.WARNING_MESSAGE);
                matriculaUsuario.setText("");
                matriculaUsuario.requestFocus();
            }
}

public void consultaCompletaLogs(){

    //quando abrir a tela pesquisa logo a lista completa de logs
    listaLogs.setSelected(true);
    listaLogs();
    validaCampos();
    configuraParaPesquisa();


}

}//fim classe




/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * acompanhamentoPesagemUsuarioBombona.java
 *
 * Created on 11/02/2010, 10:56:54
 */

package RelatorioForm;
import RelatorioJava.acompanhamentoUsuarioBomb;
import javax.swing.text.MaskFormatter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import auxiliar.*;
/**
 *
 * @author ayrton monier
 */
public class acompanhamentoPesagemUsuarioBombona extends javax.swing.JFrame {

    MaskFormatter formData, formDataCadastro;
    private conexao con_bombona;
    private String dataFormatadataJTable, dataFormatadaAreaTexto;
    //private String usuario;
    public static String periodoInicial, periodoFinal, tipo, pesagem, capacidade, turno, gravadoExcluido;//G = GRAVADO
    //private String ordenacao;
    private boolean pesquise = true;

    /** Creates new form acompanhamentoPesagemUsuarioBombona */
    public acompanhamentoPesagemUsuarioBombona() {
        initComponents();

        gravadoExcluido = "G";

        if(validaLogin.USUARIO.equals("Gerente")){
            tipoRegistro.setVisible(false);
            lb_reg.setVisible(false);
        }

        con_bombona = new conexao();
        con_bombona.conecta();

        novoRelatorio();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qtBombPesada = new javax.swing.JTextField();
        acompanhaInci = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        operador = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        matriculaUsuarioBomb = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        consultaHoje = new javax.swing.JRadioButton();
        consultaCompleta = new javax.swing.JRadioButton();
        consultaDiaPeriodo = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoDe = new JFormattedTextField(formData);
        try{
            formData = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        periodoA = new JFormattedTextField(formData);
        a = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        try{
            formDataCadastro = new MaskFormatter("##-##-####");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir a máscara no campo, erro :"+e);
        }
        dataCadastro = new JFormattedTextField(formDataCadastro);
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        capacidadeBomb = new javax.swing.JComboBox();
        tipoBomb = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Turno = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        tipoPesagem = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaBombona = new javax.swing.JTable();
        btConfirmaBusca = new javax.swing.JButton();
        btNovoRelatorio = new javax.swing.JButton();
        btAtualiza = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btImprimir = new javax.swing.JButton();
        tipoRegistro = new javax.swing.JComboBox();
        lb_reg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Acompanhamento de pesagem de bombonas por operador - Sistema Serquip 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        qtBombPesada.setEditable(false);
        qtBombPesada.setFont(new java.awt.Font("Tahoma", 1, 14));
        qtBombPesada.setForeground(new java.awt.Color(255, 0, 0));
        qtBombPesada.setBorder(javax.swing.BorderFactory.createTitledBorder("Campo de retorno de valor"));

        acompanhaInci.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/acompanhamentoInci.png"))); // NOI18N
        acompanhaInci.setToolTipText("Consultar incineração de resíduos por este operador");
        acompanhaInci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acompanhaInciActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel11.setBackground(new java.awt.Color(204, 204, 204));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Operador"));

        operador.setEditable(false);
        operador.setFont(new java.awt.Font("Tahoma", 1, 14));
        operador.setToolTipText("Digite o contrato se o campo estiver habilitado");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operador, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(operador, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Matricula"));

        matriculaUsuarioBomb.setFont(new java.awt.Font("Tahoma", 1, 14));
        matriculaUsuarioBomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaUsuarioBombActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matriculaUsuarioBomb, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(matriculaUsuarioBomb, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções de acompanhamento de pesagem"));

        consultaHoje.setBackground(new java.awt.Color(204, 204, 204));
        consultaHoje.setText("Consultar pesagem de hoje");
        consultaHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaHojeActionPerformed(evt);
            }
        });

        consultaCompleta.setBackground(new java.awt.Color(204, 204, 204));
        consultaCompleta.setSelected(true);
        consultaCompleta.setText("Consultar um operador");
        consultaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaCompletaActionPerformed(evt);
            }
        });

        consultaDiaPeriodo.setBackground(new java.awt.Color(204, 204, 204));
        consultaDiaPeriodo.setText("Consultar dia ou período de pesagem");
        consultaDiaPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaDiaPeriodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consultaCompleta)
                .addGap(18, 18, 18)
                .addComponent(consultaDiaPeriodo)
                .addGap(18, 18, 18)
                .addComponent(consultaHoje)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaCompleta)
                    .addComponent(consultaDiaPeriodo)
                    .addComponent(consultaHoje))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Dia ou período da consulta"));

        periodoDe.setToolTipText("Digite a data inicial da pesquisa");
        periodoDe.setFont(new java.awt.Font("Tahoma", 1, 12));
        periodoDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodoDeActionPerformed(evt);
            }
        });

        periodoA.setEditable(false);
        periodoA.setToolTipText("Se habilitado digite a data final da consulta");
        periodoA.setFont(new java.awt.Font("Tahoma", 1, 12));

        a.setText("a:");
        a.setToolTipText("Adiciona a data final da consulta");
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(periodoDe, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodoDe, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodoA, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(204, 204, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Data de cadastro"));

        dataCadastro.setEditable(false);
        dataCadastro.setToolTipText("Digite a data inicial da pesquisa");
        dataCadastro.setFont(new java.awt.Font("Tahoma", 1, 12));
        dataCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(dataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Opções do filtro de consulta"));

        jLabel7.setText("Tipo de bombona:");

        capacidadeBomb.setFont(new java.awt.Font("Tahoma", 1, 12));
        capacidadeBomb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "200 Litros", "50 Litros", "20 Litros" }));
        capacidadeBomb.setToolTipText("Escolha uma das capacidades ou todas");
        capacidadeBomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacidadeBombActionPerformed(evt);
            }
        });

        tipoBomb.setFont(new java.awt.Font("Tahoma", 1, 12));
        tipoBomb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Contrato", "Extra", "Desconhecida" }));
        tipoBomb.setToolTipText("Escolha bombonas de contrato ou extra");
        tipoBomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoBombActionPerformed(evt);
            }
        });

        jLabel6.setText("Capacidade da bombona:");

        jLabel5.setText("Turno:");

        Turno.setFont(new java.awt.Font("Tahoma", 1, 12));
        Turno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dia completo", "Manha", "Tarde", "Noite" }));
        Turno.setToolTipText("Escolha um dos turnos ou o dia completo");
        Turno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TurnoActionPerformed(evt);
            }
        });

        jLabel8.setText("Tipo de pesagem:");

        tipoPesagem.setFont(new java.awt.Font("Tahoma", 1, 12));
        tipoPesagem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas", "Em dia", "Acumuladas" }));
        tipoPesagem.setToolTipText("Escolha bombonas de contrato ou extra");
        tipoPesagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoPesagemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tipoPesagem, 0, 118, Short.MAX_VALUE)
                    .addComponent(capacidadeBomb, javax.swing.GroupLayout.Alignment.LEADING, 0, 118, Short.MAX_VALUE)
                    .addComponent(Turno, 0, 118, Short.MAX_VALUE)
                    .addComponent(tipoBomb, javax.swing.GroupLayout.Alignment.LEADING, 0, 118, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel5))
                    .addComponent(Turno))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel6))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(capacidadeBomb, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoBomb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(tipoPesagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabelaBombona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código bomb.", "Contrato", "Tipo", "Capacidade", "Peso", "Pesagem", "Data", "Turno", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaBombona);

        btConfirmaBusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ok.png"))); // NOI18N
        btConfirmaBusca.setToolTipText("Confirmar consulta");
        btConfirmaBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmaBuscaActionPerformed(evt);
            }
        });

        btNovoRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo_relatorio.png"))); // NOI18N
        btNovoRelatorio.setToolTipText("Nova consulta");
        btNovoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoRelatorioActionPerformed(evt);
            }
        });

        btAtualiza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/atualiza.png"))); // NOI18N
        btAtualiza.setToolTipText("Atualizar");
        btAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizaActionPerformed(evt);
            }
        });

        btSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sair.png"))); // NOI18N
        btSair.setToolTipText("Sair da tela de relatório");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        jLabel22.setText("Qtd. bomb. pesada:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 17));
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/acompanhamento.png"))); // NOI18N
        jLabel1.setText("Acompanhamento de PESAGEM DE BOMBONAS por operador");

        btImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        btImprimir.setToolTipText("Imprimir");
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });

        tipoRegistro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gravados", "Excluídos" }));
        tipoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoRegistroActionPerformed(evt);
            }
        });

        lb_reg.setText("Reg.:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                .addComponent(lb_reg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btConfirmaBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btNovoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAtualiza, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acompanhaInci, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(qtBombPesada, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tipoRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_reg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22)
                            .addComponent(qtBombPesada, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(acompanhaInci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btAtualiza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btNovoRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btConfirmaBusca))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void acompanhaInciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acompanhaInciActionPerformed
        try{
            con_bombona.executeSQL("select count(matricula_usuario) as 'total incineracao' from incineracao where matricula_usuario = '"+matriculaUsuarioBomb.getText()+"'");
            con_bombona.resultset.first();
            int qtInci = con_bombona.resultset.getInt("total incineracao");


            if(qtInci == 0){
                JOptionPane.showMessageDialog(null, "Usuário ainda não efetuou pesagem de resíduos", "Aviso", JOptionPane.WARNING_MESSAGE);

            }

            else if(qtInci > 0){

                String matUser = matriculaUsuarioBomb.getText().toString();
                acompanhamentoPesagemUsuarioIncineracao acompanhaUsuarioInci = new acompanhamentoPesagemUsuarioIncineracao();
                
                acompanhaUsuarioInci.matriculaUsuarioInci.setText(matUser);

                acompanhaUsuarioInci.pesquisaUsuarioInci();
                acompanhaUsuarioInci.validaCampos();
                acompanhaUsuarioInci.configuraParaPesquisa();
                acompanhaUsuarioInci.acompanhaBomb.setVisible(false);
                acompanhaUsuarioInci.setVisible(true);
            }

            //depois da pesquisa atualiza o resultset
            atualizaResultset();

        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível mostrar o acompanhamento deste operador.\nErro: "+e);
            atualizaResultset();
        }
}//GEN-LAST:event_acompanhaInciActionPerformed

    private void consultaHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaHojeActionPerformed
        consultaHoje();
}//GEN-LAST:event_consultaHojeActionPerformed

    private void consultaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaCompletaActionPerformed
        consultaCompleta();
}//GEN-LAST:event_consultaCompletaActionPerformed

    private void consultaDiaPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaDiaPeriodoActionPerformed
        consultaDiaPeriodo();
}//GEN-LAST:event_consultaDiaPeriodoActionPerformed

    private void periodoDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodoDeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_periodoDeActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        if(a.isSelected()){
            periodoA.setEditable(false);
            periodoA.setText("");
            a.setSelected(false);
        } else{
            periodoA.setEditable(true);
            periodoA.requestFocus();
            a.setSelected(true);
        }
}//GEN-LAST:event_aActionPerformed

    private void dataCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataCadastroActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dataCadastroActionPerformed

    private void capacidadeBombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacidadeBombActionPerformed

}//GEN-LAST:event_capacidadeBombActionPerformed

    private void tipoBombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoBombActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tipoBombActionPerformed

    private void TurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TurnoActionPerformed

}//GEN-LAST:event_TurnoActionPerformed

    private void tipoPesagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoPesagemActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tipoPesagemActionPerformed

    private void btConfirmaBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmaBuscaActionPerformed
        validaCampos();
        configuraParaPesquisa();
}//GEN-LAST:event_btConfirmaBuscaActionPerformed

    private void btNovoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoRelatorioActionPerformed
        novoRelatorio();
}//GEN-LAST:event_btNovoRelatorioActionPerformed

    private void btAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizaActionPerformed
        //atualiza pesquisa
        atualizaPesquisa();
}//GEN-LAST:event_btAtualizaActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_bombona.desconecta();
            dispose();
        } else
            return;
}//GEN-LAST:event_btSairActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "DESEJA REALMENTE SAIR?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_bombona.desconecta();
            dispose();
        } else
            return;
    }//GEN-LAST:event_formWindowClosing

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
        new acompanhamentoUsuarioBomb();
    }//GEN-LAST:event_btImprimirActionPerformed

    private void matriculaUsuarioBombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaUsuarioBombActionPerformed
        pesquisaUsuarioBomb();
    }//GEN-LAST:event_matriculaUsuarioBombActionPerformed

    private void tipoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoRegistroActionPerformed
        if(tipoRegistro.getSelectedItem().toString().equals("Gravados"))
            gravadoExcluido = "G";
        else
            gravadoExcluido = "E";
    }//GEN-LAST:event_tipoRegistroActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new acompanhamentoPesagemUsuarioBombona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox Turno;
    public static javax.swing.JButton a;
    public javax.swing.JButton acompanhaInci;
    public static javax.swing.JButton btAtualiza;
    public static javax.swing.JButton btConfirmaBusca;
    private javax.swing.JButton btImprimir;
    public static javax.swing.JButton btNovoRelatorio;
    public static javax.swing.JButton btSair;
    public static javax.swing.JComboBox capacidadeBomb;
    private javax.swing.JRadioButton consultaCompleta;
    private javax.swing.JRadioButton consultaDiaPeriodo;
    private javax.swing.JRadioButton consultaHoje;
    public static javax.swing.JFormattedTextField dataCadastro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lb_reg;
    public static javax.swing.JTextField matriculaUsuarioBomb;
    public static javax.swing.JTextField operador;
    public static javax.swing.JFormattedTextField periodoA;
    public static javax.swing.JFormattedTextField periodoDe;
    private javax.swing.JTextField qtBombPesada;
    private javax.swing.JTable tabelaBombona;
    public static javax.swing.JComboBox tipoBomb;
    public static javax.swing.JComboBox tipoPesagem;
    private javax.swing.JComboBox tipoRegistro;
    // End of variables declaration//GEN-END:variables

public void preencherTabela(){

//acompanhamentoBombona.tabelaInci.getColumnModel().getColumn(0).setPreferredWidth(20); ajusta largura das colunas

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaBombona.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

    try {

        con_bombona.resultset.first();

        do{
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela
                formataDataBancoParaJTable(con_bombona.resultset.getString("data_pesagem_bomb"));

                //vai add linhas
                //equivale a uma linha na minha tabela Bombona
                modelo.addRow(new Object[]{con_bombona.resultset.getString("num_seq_bomb"),//codigo
                                           con_bombona.resultset.getInt("contrato"),      //contrato
                                           con_bombona.resultset.getString("tipo_bomb"),      //contrato
                                           con_bombona.resultset.getString("capacidade_bomb"),//capacidade
                                           con_bombona.resultset.getString("peso_bruto"),//peso bruto
                                           con_bombona.resultset.getString("tipo_pesagem"),//tipo de pesagem (em dia ou acumulada)
                                           dataFormatadataJTable,//data
                                           con_bombona.resultset.getString("turno_pesagem"),//turno
                                           con_bombona.resultset.getString("hora_pesagem_bomb")});//hora

        }while(con_bombona.resultset.next());//enquanto tiver dados preenche o jtable com os valores

        //depois que finaliza atualiza o resultset
        atualizaResultset();
    }

    catch (Exception e) {

         JOptionPane.showMessageDialog(null, "Não consta dados nesta data/período ou com as especificações do filtro", "Aviso", JOptionPane.WARNING_MESSAGE);

            //bt atualiza fica inabilitado
            btAtualiza.setEnabled(false);

            //habilita botao imprimir
            btImprimir.setEnabled(false);

            //habilita botao acompanha icineracao
            acompanhaInci.setEnabled(true);

            //bt confirmaBusca é habilitado
            btConfirmaBusca.setEnabled(true);

            //btNovo relatorio e´habilitado
            btNovoRelatorio.setEnabled(true);

    }
}//fim preencher tabela

public void formataDataBancoParaJTable(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTable = dia+"-"+mes+"-"+ano;

}//fim convert area text

public void formataDataBancoParaAreaTexto(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadaAreaTexto = dia+mes+ano;

}//fim convert area text

public void atualizaResultset(){
    try{
    //atualiza o resultset
    con_bombona.executeSQL("select * from cad_bombona where (turno_pesagem = "+turno+") and (data_pesagem_bomb between '"+periodoInicial+"' and '"+periodoFinal+"') and (tipo_bomb = "+tipo+") and (tipo_pesagem = "+pesagem+") and (capacidade_bomb = "+capacidade+") and (situacao_reg = '"+gravadoExcluido+"') and matricula_usuario = '"+matriculaUsuarioBomb.getText()+"'");
    con_bombona.resultset.first();

    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null, "ATUALIZAÇÃO NÃO EFETUADA", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}//fim atualiza resultset

public void consultaCompleta(){
    limpaCampos();

    //foco para o campo matricula
    matriculaUsuarioBomb.requestFocus();

    //inabilita objetos de periodo de pesquisa
    periodoDe.setEditable(false);
    periodoA.setEditable(false);
    a.setEnabled(false);


}

public void consultaDiaPeriodo(){

limpaCampos();

periodoDe.setEditable(true);
a.setEnabled(true);
periodoA.setEditable(false);


matriculaUsuarioBomb.requestFocus();
}

public void consultaHoje(){

limpaCampos();

periodoDe.setEditable(false);
periodoA.setEditable(false);
a.setEnabled(false);

matriculaUsuarioBomb.requestFocus();

}

public void limpaCampos(){

    tipo = "";
    capacidade = "";
    pesagem = "";
    turno = "";

    matriculaUsuarioBomb.setText("");
    operador.setText("");
    dataCadastro.setText("");
    periodoDe.setText("");
    periodoA.setText("");
    qtBombPesada.setText("");

    btImprimir.setEnabled(false);
    acompanhaInci.setEnabled(false);
    btAtualiza.setEnabled(false);

    Turno.setSelectedItem("Dia completo");
    capacidadeBomb.setSelectedItem("Todas");
    tipoBomb.setSelectedItem("Todas");
    tipoPesagem.setSelectedItem("Todas");

    limpaJtable();

}

public void limpaJtable(){

//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos
DefaultTableModel modelo = (DefaultTableModel) tabelaBombona.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preecher logo abaixo com novos dados

}//LIMPA JTABLE

//METODO QUE VAI VER SE OS CAMPOS ESTAO CERTINHOS PARA BUSCA
public void validaCampos(){
pesquise = false;
String msg = "";

//se acompanhar por contrato for selecionado
if(consultaCompleta.isSelected() || consultaHoje.isSelected()){

        if(matriculaUsuarioBomb.getText().isEmpty()){
            msg = "Informe a matrícula do operador.";
            matriculaUsuarioBomb.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else
            pesquise = true;

}//fim se consulta completa for selecionado

//se acompanhar dia ou periodo de pesagem for selecionado
else if(consultaDiaPeriodo.isSelected()){

        if(matriculaUsuarioBomb.getText().isEmpty()){
            msg = "Informe a matrícula do operador.";
            matriculaUsuarioBomb.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        //se data inicial nao for preenchida
        else if(periodoDe.getText().equals("  -  -    ")){
            msg = "Informe a data inicial da pesquisa.";
            periodoDe.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }

        else if(periodoA.isEditable() && periodoA.getText().equals("  -  -    ")){
            msg = "Informe a data final da pesquisa";
            periodoA.requestFocus();
            pesquise = false;
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(consultaCompleta.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");
                if(pesquise == true)
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
            else if(consultaDiaPeriodo.isSelected()){
                testaData(periodoDe.getText(), "data inicial da pesquisa");

                if(pesquise == true && periodoA.isEditable())
                    testaData(periodoA.getText(), "data final da pesquisa");
            }
           else
                testaData(periodoDe.getText(), "data inicial da pesquisa");
        }
}//fim se acompanhar por dia periodo

//FIM VALIDAR CAMPOS : SE OS CAMPOS ESTIVEREM CORRETOS A VARIÁVEL PESQUISE VAI RECEBER TRUE



}//fim validaCampos

public void testaData(String data, String nomeCampo){
            pesquise = true;
String dia, mes, ano;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);

Data.le_data();

//imperfeições na data
            if(Integer.parseInt(dia) < 1 || Integer.parseInt(dia) > 31){
                JOptionPane.showMessageDialog(null, "O dia deve ser de 1 a 31 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(mes) < 1 || Integer.parseInt(mes) > 12){

                JOptionPane.showMessageDialog(null, "O mês deve ser de 1 a 12 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(dia) > Data.DIA && Integer.parseInt(mes) == Data.MES && Integer.parseInt(ano) == Data.ANO){

                JOptionPane.showMessageDialog(null, "O dia digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }

            else if(Integer.parseInt(dia) == Data.DIA && Integer.parseInt(mes) > Data.MES && Integer.parseInt(ano) == Data.ANO+1900){

                JOptionPane.showMessageDialog(null, "O mês digitado é maior que a data atual no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else if(Integer.parseInt(ano) <= 2000){

                JOptionPane.showMessageDialog(null, "O ano deve ser maior que 2000 no campo : "+nomeCampo, "Aviso", JOptionPane.WARNING_MESSAGE);

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoDe.requestFocus();
                else
                    periodoA.requestFocus();

                pesquise  = false;
            }
            else
                pesquise = true;


}

public void configuraParaPesquisa(){

    if(pesquise == true){

                //habilita botao imprimir
                btImprimir.setEnabled(true);

                //habilita atualizar
                btAtualiza.setEnabled(true);
                
                //habilita botao acompanha icineracao
                acompanhaInci.setEnabled(true);


            //SE CONSULTA COMPLETA FOR SELECIONADA
            if(consultaCompleta.isSelected()){
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoA.getText(), "data final da pesquisa");
            }
            //SE CONSULTA POR DIA OU PERIODO FOR SELECIONADA
            else if(consultaDiaPeriodo.isSelected()){
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                if(periodoA.isEditable())
                    formataDataBanco(periodoA.getText(), "data final da pesquisa");
                else
                    formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }
            //SE CONSULTA DE HOJE FOR SELECIONADA
            else{
                formataDataBanco(periodoDe.getText(), "data inicial da pesquisa");
                formataDataBanco(periodoDe.getText(), "data final da pesquisa");
            }

                //se TURNO selecionado for MANHA
                if(Turno.getSelectedItem().toString().equals("Manha"))
                    turno = "'Manha'";

                //se TURNO selecionado for TARDE
                else if(Turno.getSelectedItem().toString().equals("Tarde"))
                    turno = "'Tarde'";

                //se TURNO selecionado for NOITE
                else if(Turno.getSelectedItem().toString().equals("Noite"))
                    turno = "'Noite'";

                //se TURNO selecionado for DIA COMPLETO
                else
                    turno = "'Manha' or turno_pesagem = 'Tarde' or turno_pesagem = 'Noite'";


                //se CAPACIDADE DA BOMBONA selecionado for 200 litros
                if(capacidadeBomb.getSelectedItem().toString().equals("200 Litros"))
                    capacidade = "200";

                //se CAPACIDADE DA BOMBONA selecionado for 50 litros
                else if(capacidadeBomb.getSelectedItem().toString().equals("50 Litros"))
                    capacidade = "50";

                //se CAPACIDADE DA BOMBONA selecionado for 20 litros
                else if(capacidadeBomb.getSelectedItem().toString().equals("20 Litros"))
                    capacidade = "20";

                //se CAPACIDADE DA BOMBONA selecionado for 200
                else
                    capacidade = "200 or capacidade_bomb = 50 or capacidade_bomb = 20";


                //se TIPO DE BOMBONA selecionado for CONTRATO litros
                if(tipoBomb.getSelectedItem().toString().equals("Contrato"))
                    tipo = "'contrato'";

                //se TIPO DE BOMBONA selecionado for EXTRA litros
                else if(tipoBomb.getSelectedItem().toString().equals("Extra"))
                    tipo = "'extra'";

                //se TIPO DE BOMBONA selecionado for EXTRA litros
                else if(tipoBomb.getSelectedItem().toString().equals("Desconhecida"))
                    tipo = "'Descon.'";

                //se TIPO DE BOMBONA selecionado for TODOS litros
                else
                    tipo = "'contrato' or tipo_bomb = 'extra' or tipo_bomb = 'Descon.'";


                //se TIPO DE PESAGEM selecionado for EM DIA
                if(tipoPesagem.getSelectedItem().toString().equals("Em dia"))
                    pesagem = "'Em dia'";

                //se TIPO DE PESAGEM selecionado for ACUMULADAS
                else if(tipoPesagem.getSelectedItem().toString().equals("Acumuladas"))
                    pesagem = "'Acumulada'";

                //se TIPO DE PESAGEM selecionado for TODAS
                else
                    pesagem = "'Em dia' or tipo_pesagem = 'Acumulada'";




//               //teste
//               JOptionPane.showMessageDialog(null, "MATRICULA: "+matricula.getText()+"\n" +
//                                                    "DATA INICIAL: "+periodoInicial+"\n" +
//                                                    "DATA FINAL: "+periodoFinal+"\n" +
//                                                    "TURNO: "+turno+"\n" +
//                                                    "CAPACIDADE: "+capacidade+"\n" +
//                                                    "TIPO BOMBONA: "+tipo+"\n" +
//                                                    "TIPO PESAGEM: "+pesagem);



                atualizaPainelDetalhado();
                preencherTabela();

    }//fim se pesquise == true


}//fim configura pesquisa

public void atualizaPainelDetalhado(){
String sql;
                try{
                //Quantidade de bombonas pesadas
                sql = "select count(contrato) as 'total pesadas' from cad_bombona where (turno_pesagem = "+turno+") and (data_pesagem_bomb between '"+periodoInicial+"' and '"+periodoFinal+"') and (tipo_bomb = "+tipo+") and (tipo_pesagem = "+pesagem+") and (capacidade_bomb = "+capacidade+") and (situacao_reg = '"+gravadoExcluido+"') and matricula_usuario = "+matriculaUsuarioBomb.getText();
                con_bombona.executeSQL(sql);
                con_bombona.resultset.first();
                qtBombPesada.setText(con_bombona.resultset.getString("total pesadas"));

                atualizaResultset();

                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Quantidade de bombonas pesadas não atualizada.\nErro: "+e);
                }
}//fim atualiza painel detalhado

public void atualizaPesquisa(){

        configuraParaPesquisa();
        atualizaPainelDetalhado();
        preencherTabela();
}
//formata data para gravar no banco
public void formataDataBanco(String data, String nomeCampo){
int n = 0;
String dia, mes, ano, dataFormatada;

        dia = data.substring(0, 2);
        mes = data.substring(3, 5);
        ano = data.substring(6, 10);


        dataFormatada = ano+"-"+mes+"-"+dia;

                if(nomeCampo.equals("data inicial da pesquisa"))
                    periodoInicial = dataFormatada;
                else if(nomeCampo.equals("data final da pesquisa"))
                    periodoFinal = dataFormatada;
                else
                    JOptionPane.showMessageDialog(null, "nome do campo nao confere");



}//fim convertData

public void novoRelatorio(){

        periodoInicial = "";
        periodoFinal = "";

        //nao altoriza para configurar a pesquisa
        pesquise = false;

        limpaCampos();
        consultaCompleta();

        //seleciona acompanhar por contrato
        consultaCompleta.setSelected(true);

        //inabilita botoes
        btAtualiza.setEnabled(false);
        btImprimir.setEnabled(false);

        //habilita botao acompanha icineracao
        acompanhaInci.setEnabled(false);

        matriculaUsuarioBomb.requestFocus();


}//FIM NOVO RELATORIO

public void pesquisaUsuarioBomb(){
            //data de hoje
            Data.le_data();

            try{
            con_bombona.executeSQL("select * from usuario where matricula_usuario = '"+matriculaUsuarioBomb.getText()+"'");
            con_bombona.resultset.first();

            String nomeUser = con_bombona.resultset.getString("nome_usuario");
            String dataCad = con_bombona.resultset.getString("data_cad_usuario");

            operador.setText(nomeUser);

            //formata a data de cadastro do usuario que esta no banco e passa para area de texto no formato dd/mm/aaaa
            formataDataBancoParaAreaTexto(dataCad);

            dataCadastro.setText(dataFormatadaAreaTexto);

            if(consultaCompleta.isSelected()){
                periodoDe.setText(dataFormatadaAreaTexto);
                periodoA.setText(Data.dataAtualJFormatted);
            }
            if(consultaDiaPeriodo.isSelected())
               periodoDe.requestFocus();

            if(consultaHoje.isSelected())
                periodoDe.setText(Data.dataAtualJFormatted);

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Matrícula não confere, tente outra vez", "Aviso", JOptionPane.WARNING_MESSAGE);
                matriculaUsuarioBomb.setText("");
                matriculaUsuarioBomb.requestFocus();
            }
}

}//fim classe




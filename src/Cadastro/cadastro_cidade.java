/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * cadastro_cidade.java
 *
 * Created on 19/03/2010, 15:07:19
 */

package Cadastro;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import javax.swing.table.TableModel;
import auxiliar.conexao;
import auxiliar.validaLogin;
/**
 *
 * @author ayrton monier
 */
public class cadastro_cidade extends javax.swing.JDialog {

    MaskFormatter formatoMat;
    public boolean extende = false;

    private conexao con_cidades;
    private String direcao;
    private String ordenacao = "cod_cidade";
    private int navega;
    private boolean grava;
    public static boolean senhaAtualizada = false;
    public String dataFormatadataJTable;

    /** Creates new form cadastro_cidade */
    public cadastro_cidade(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        con_cidades = new conexao();
        con_cidades.conecta();

        atualizaResultset();
        preencherJtable();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cb_listaCidades = new javax.swing.JComboBox();
        tf_consulta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_qtdCidades = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tCidades = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        btAnterior = new javax.swing.JButton();
        btUltimo = new javax.swing.JButton();
        btPrimeiro = new javax.swing.JButton();
        btProximo = new javax.swing.JButton();
        btGrava = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        rb_codigo = new javax.swing.JRadioButton();
        rb_nome = new javax.swing.JRadioButton();
        btNovo = new javax.swing.JButton();
        tf_nome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tf_cod = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Manutenção do registro de cidades - Sistema Serquip 1.0");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cb_listaCidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_listaCidadesActionPerformed(evt);
            }
        });
        cb_listaCidades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cb_listaCidadesKeyTyped(evt);
            }
        });

        tf_consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_consultaActionPerformed(evt);
            }
        });
        tf_consulta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_consultaFocusLost(evt);
            }
        });

        jLabel7.setText("Cidades:");

        jLabel6.setText("Consultar:");

        tf_qtdCidades.setEditable(false);
        tf_qtdCidades.setFont(new java.awt.Font("Tahoma", 1, 12));
        tf_qtdCidades.setForeground(new java.awt.Color(255, 0, 0));
        tf_qtdCidades.setBorder(javax.swing.BorderFactory.createTitledBorder("Qtd. de cidades"));

        tCidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Data cadastro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tCidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tCidadesMouseClicked(evt);
            }
        });
        tCidades.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tCidadesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tCidades);

        btAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/anterior.png"))); // NOI18N
        btAnterior.setToolTipText("Registro anterior");
        btAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnteriorActionPerformed(evt);
            }
        });

        btUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ultimo.png"))); // NOI18N
        btUltimo.setToolTipText("Último registro");
        btUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUltimoActionPerformed(evt);
            }
        });

        btPrimeiro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/primeiro.png"))); // NOI18N
        btPrimeiro.setToolTipText("Primeiro registro");
        btPrimeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrimeiroActionPerformed(evt);
            }
        });

        btProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/proximo.png"))); // NOI18N
        btProximo.setToolTipText("Próximo registro");
        btProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProximoActionPerformed(evt);
            }
        });

        btGrava.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/gravar.png"))); // NOI18N
        btGrava.setMnemonic('s');
        btGrava.setToolTipText("Salvar ou atualizar registro");
        btGrava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGravaActionPerformed(evt);
            }
        });

        btSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sair.png"))); // NOI18N
        btSair.setMnemonic('e');
        btSair.setToolTipText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/excluir.png"))); // NOI18N
        btExcluir.setMnemonic('b');
        btExcluir.setToolTipText("Excluir registro");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordenação"));

        buttonGroup1.add(rb_codigo);
        rb_codigo.setSelected(true);
        rb_codigo.setText("Código");
        rb_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_codigoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rb_nome);
        rb_nome.setText("Nome");
        rb_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_nomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rb_codigo)
                    .addComponent(rb_nome))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(rb_codigo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rb_nome))
        );

        btNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/adicionar.png"))); // NOI18N
        btNovo.setMnemonic('a');
        btNovo.setToolTipText("Novo registro");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        jLabel1.setText("Cód.:");

        tf_cod.setEditable(false);

        jLabel2.setText("Nome:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_listaCidades, 0, 181, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_nome, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                            .addComponent(tf_cod, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btGrava, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(tf_qtdCidades, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(tf_consulta, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_listaCidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(tf_cod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(tf_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btGrava, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btUltimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btProximo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPrimeiro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_qtdCidades, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void cb_listaCidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_listaCidadesActionPerformed
        //        selecaoUF();
    }//GEN-LAST:event_cb_listaCidadesActionPerformed

    private void cb_listaCidadesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cb_listaCidadesKeyTyped
        informaCidadeUF();
}//GEN-LAST:event_cb_listaCidadesKeyTyped

    private void tf_consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_consultaActionPerformed
        pesquisarCidadeNome();
}//GEN-LAST:event_tf_consultaActionPerformed

    private void tf_consultaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_consultaFocusLost
        tf_consulta.setText("");
}//GEN-LAST:event_tf_consultaFocusLost

    private void tCidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tCidadesMouseClicked
        cliqueGrid();
}//GEN-LAST:event_tCidadesMouseClicked

    private void tCidadesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tCidadesKeyReleased
        cliqueGrid();
}//GEN-LAST:event_tCidadesKeyReleased

    private void btAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnteriorActionPerformed
        navega = 1;
        if(tf_cod.getText().isEmpty() && (tf_nome.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "primeiro";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "anterior";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btAnteriorActionPerformed

    private void btUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUltimoActionPerformed
        if(tf_cod.getText().isEmpty() && (tf_nome.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "ultimo";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "ultimo";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btUltimoActionPerformed

    private void btPrimeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrimeiroActionPerformed

        if(tf_cod.getText().isEmpty() && (tf_nome.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "primeiro";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "primeiro";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btPrimeiroActionPerformed

    private void btProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProximoActionPerformed
        navega = 2;
        if(tf_cod.getText().isEmpty() && (tf_nome.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){//se apertar em sim
                //posição do registro
                direcao = "proximo";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{//se apertar em não
                return;
            }
        } else{
            //posição do registro
            direcao = "proximo";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btProximoActionPerformed

    private void btGravaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGravaActionPerformed

        validaCampos();

        //se grava for verdadeiro(gravou no bd);
        if(grava == true){

            //sem caixa de texto onde tem o cod do cliente estiver vazia grava os dados
            if(tf_cod.getText().isEmpty())
                gravaDados();

            else{

                int opcao = JOptionPane.showConfirmDialog(null, "Deseja atualizar o cadastro?", "Confirmação", JOptionPane.YES_NO_OPTION);

                if(opcao == JOptionPane.YES_OPTION)
                    atualizaDados();
                else
                    return;
            }
        }//fim 1° if
}//GEN-LAST:event_btGravaActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){

            //apos fechar nao atualiza dados da tela de cadstro de clientes
            auxiliar.validaCadCli.atualizaDadosManutencao = false;
            con_cidades.desconecta();
            dispose();


        } else
            return;
}//GEN-LAST:event_btSairActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        if(tf_cod.getText().isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione um registro através dos botoes de navegação", "Aviso", JOptionPane.WARNING_MESSAGE);
        else
            excluirRegistro();
}//GEN-LAST:event_btExcluirActionPerformed

    private void rb_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_codigoActionPerformed
        ordenacao = "cod_cidade";
        atualizaResultset();
        preencherJtable();
        preencherListaDeCidades();
        mostrarDados();
}//GEN-LAST:event_rb_codigoActionPerformed

    private void rb_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_nomeActionPerformed
        ordenacao = "nome_cidade";
        atualizaResultset();
        preencherJtable();
        preencherListaDeCidades();
        mostrarDados();
}//GEN-LAST:event_rb_nomeActionPerformed

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        limpaCampos();
        tf_nome.setEditable(true);
        tf_nome.requestFocus();
        habilitaBotoes(false);
    }//GEN-LAST:event_btNovoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){

            //apos fechar nao atualiza dados da tela de cadstro de clientes
            auxiliar.validaCadCli.atualizaDadosManutencao = false;

            con_cidades.desconecta();
            dispose();
        } else
            return;
    }//GEN-LAST:event_formWindowClosing

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                cadastro_cidade dialog = new cadastro_cidade(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnterior;
    public javax.swing.JButton btExcluir;
    private javax.swing.JButton btGrava;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btPrimeiro;
    private javax.swing.JButton btProximo;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btUltimo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cb_listaCidades;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton rb_codigo;
    private javax.swing.JRadioButton rb_nome;
    private javax.swing.JTable tCidades;
    public static javax.swing.JTextField tf_cod;
    private javax.swing.JTextField tf_consulta;
    public javax.swing.JTextField tf_nome;
    private javax.swing.JTextField tf_qtdCidades;
    // End of variables declaration//GEN-END:variables
public void limpaCampos(){

         //limpa todos os campos do cadastro de bombonas

         tf_cod.setText("");
         tf_nome.setText("");

}

//GRAVA OS DADOS DE PESO BOMBONA
public void gravaDados(){

auxiliar.Data.le_data();
try{

String sqlInsert = "insert into cad_cidade (nome_cidade" +
            ", data_cadastro)" +
            //valores dos campos
            " values ('"+tf_nome.getText().toUpperCase()+"'"+    //nome cidade
            ", '"+auxiliar.Data.dataAtualBD+"')";                //Data cadastrto


    int gravado = con_cidades.statement.executeUpdate(sqlInsert);

    //se conseguiu gravar, retorna 1 e entra no if
    if(gravado == 1){
    JOptionPane.showMessageDialog(null, "GRAVAÇÃO EFETUADA COM SUCESSO.");

        limpaCampos();
        atualizaResultset();
        preencherListaDeCidades();
        preencherJtable();//atualiza tabela

        //se o registro for feito da da tela de clientes
        if(auxiliar.validaCadCli.atualizaDadosManutencao == true){

            auxiliar.validaCadCli.preencherListaDeCidades();
            
            if(CadastroCliente.codigoCli.getText().isEmpty())
                return;
            else
                auxiliar.validaCadCli.mostraDadosCadCli();
        }

    }
}//fim try

catch(Exception e){
    JOptionPane.showMessageDialog(null, "ERRO AO TENTAR GRAVAR O REGISTRO. Erro:"+e, "erro", JOptionPane.ERROR_MESSAGE);
}


}//fim grava dados

public void preencherJtable(){


tCidades.getColumnModel().getColumn(0).setPreferredWidth(10);
tCidades.getColumnModel().getColumn(1).setPreferredWidth(200);
tCidades.getColumnModel().getColumn(2).setPreferredWidth(20);


//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos

DefaultTableModel modelo = (DefaultTableModel) tCidades.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preencher logo abaixo com novos dados

    try {

        con_cidades.resultset.first();
        do{
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela
                formataDataBancoParaJTable(con_cidades.resultset.getString("data_cadastro"));

                //equivale a uma linha na minha tabela Bombona
                modelo.addRow(new Object[]{con_cidades.resultset.getString("cod_cidade"),//tf_cod_CIDADE
                                           con_cidades.resultset.getString("nome_cidade"),//NOME_CIDADE
                                           dataFormatadataJTable});//Data


        }while(con_cidades.resultset.next());//enquanto tiver dados preenche o jtable com os valores

                //depois que finaliza atualiza o resultset
                atualizaResultset();

                preencherListaDeCidades();
    }

    catch (Exception e) {
        JOptionPane.showMessageDialog(null, "NENHUM REGISTRO DE CIDADES");
        limpaCampos();
        cb_listaCidades.removeAllItems();

    }



}//fim preencherJtable

public void atualizaResultset(){
try{

    con_cidades.executeSQL("select * from cad_cidade order by "+ordenacao);
    con_cidades.resultset.first();
    
}
catch(Exception e){

  JOptionPane.showMessageDialog(null, "Não atualizado, tente novamente.Erro:"+e);

}

}//fim atualiza resultSet

public void formataDataBancoParaJTable(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTable = dia+"-"+mes+"-"+ano;

}//fim convert area text

public void btNavega(){
        try{


            if(direcao.equals("primeiro"))
                con_cidades.resultset.first();

            else if(direcao.equals("anterior"))
                con_cidades.resultset.previous();

            else if(direcao.equals("proximo"))
                con_cidades.resultset.next();

            else
                con_cidades.resultset.last();

            //mostra os dados
            mostrarDados();
        }
        catch(Exception e){

        }
}

public void mostrarDados(){

            if(validaLogin.USUARIO.equals("Gerente"))
                 tf_nome.setEditable(false);
            
            try{

                habilitaBotoes(true);

                tf_cod.setText(con_cidades.resultset.getString("cod_cidade"));
                tf_nome.setText(con_cidades.resultset.getString("nome_cidade"));

                
                
            }
            catch(Exception e){

                if(navega == 1)
                    JOptionPane.showMessageDialog(null, "Você já está no primeiro registro", "Aviso", JOptionPane.WARNING_MESSAGE);
                else if(navega == 2)
                    JOptionPane.showMessageDialog(null, "Você já está no ultimo registro", "Aviso", JOptionPane.WARNING_MESSAGE);
                else
                    JOptionPane.showMessageDialog(null, "Dados não localizados "+e, "Aviso", JOptionPane.WARNING_MESSAGE);
                    
                
                    navega = 0;
                    
            }

}//fim mostrar dados

public void excluirRegistro(){

    try{

                    String sql = "select * from cad_cidade where cod_cidade = "+tf_cod.getText();
                    con_cidades.executeSQL(sql);
                    //posiciona no primeiro registro
                    con_cidades.resultset.first();

                    String nome = "Deletar a cidade: "+con_cidades.resultset.getString("nome_cidade");

                    int op = JOptionPane.showConfirmDialog(null, nome, "Deletar cidade", JOptionPane.YES_NO_OPTION);

                    if(op == JOptionPane.YES_OPTION){

                        sql = "DELETE FROM cad_cidade WHERE cod_cidade ="+tf_cod.getText();

                        int conseguiu_excluir = con_cidades.statement.executeUpdate(sql);

                        if(conseguiu_excluir == 1){

                            JOptionPane.showMessageDialog(null, "Excluído com sucesso!");
                            atualizaResultset();
                            preencherJtable();
                            mostrarDados();
                       }
                    }
                    else{
                            atualizaResultset();

                            //preencherJtable();
                           // mostrarDados();

                            return;
                    }
        }//fim try
catch(Exception e){
    JOptionPane.showMessageDialog(null, "Erro ao tentar excluir o registro\nErro: "+e, "Erro", JOptionPane.ERROR_MESSAGE);
}
}//final excluir registro


public void atualizaDados(){

    String sql;
    try{

    sql = "UPDATE cad_cidade SET nome_cidade = '"+tf_nome.getText().toUpperCase()+"'" +
                                    " where cod_cidade = "+tf_cod.getText();

    con_cidades.statement.executeUpdate(sql);

    JOptionPane.showMessageDialog(null, "Atualização efetuada com sucesso!");

    atualizaResultset();
    preencherJtable();
    mostrarDados();

    //se o registro for feito da da tela de clientes
    if(auxiliar.validaCadCli.atualizaDadosManutencao == true){
        auxiliar.validaCadCli.preencherListaDeCidades();
        auxiliar.validaCadCli.mostraDadosCadCli();
    }


}//fim ry
catch(Exception e){
    JOptionPane.showMessageDialog(null, "Não foi possível atualizar o registro, verifique o que foi digitado nos campos\nErro: "+e, "Erro", JOptionPane.ERROR_MESSAGE);
}
}//fim atualiza dados

public void preencherListaDeCidades(){
        int qtdCidades = 0;

        //remove todos os itens
        cb_listaCidades.removeAllItems();

        try{
            con_cidades.resultset.first();

        do{
            qtdCidades++;

            cb_listaCidades.addItem(con_cidades.resultset.getString("nome_cidade"));


        }while(con_cidades.resultset.next());

        tf_qtdCidades.setText(qtdCidades+"");

        //VOLTA AO PRIMEIRO REGISTRO
        con_cidades.resultset.first();

    }

    catch(Exception e){
System.out.println("erro: "+e);
           //remove todos os itens
           cb_listaCidades.removeAllItems();


    }

}//fim preenche lista

public void validaCampos(){
        String msg = "";
        grava = false;


        if(tf_nome.getText().isEmpty()){
            msg = "Informe o nome da cidade";
            tf_nome.requestFocus();
            grava = false;
        }

        else
            grava = true;//altoriza a gravação


        if(grava == false){
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);

        }
}//fim valida matricula

public void cliqueGrid(){
    //pega a linha que foi clicada na TABELA
    int linha = tCidades.getSelectedRow();
    //pega o modelo da tabela
    TableModel modelo = (TableModel) tCidades.getModel();
    //pega o tf_cod do cliente que está na linha que foi clicada e coluna 0 (primeira)
    String tf_codCidadeClicada =String.valueOf(modelo.getValueAt(linha, 0));
    //var que vai gurdar o tf_cod pesquisado no banco
    String tf_codCidadePesquisada;
    //vai determinar o fim do laço
    String igual = "n";



    try{
            //vai para o primeiro registro
            con_cidades.resultset.first();

            while(igual.equals("n")){

                tf_codCidadePesquisada = con_cidades.resultset.getString("cod_cidade");

                //se o tf_cod que foi clicado na gride for igual ao que está no banco
                if(tf_codCidadeClicada.equals(tf_codCidadePesquisada)){
                    mostrarDados();
                    igual = "s";//sai do laço e mostra dados
                }
                else
                    con_cidades.resultset.next();
             }//fim while

    }//fim try

    catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
    }

}//fim click grid

//public void selecaoUF(){
//
//        String igual = "n";
//        String nomeClicado = cb_listaCidades.getSelectedItem().toString();
//        //System.out.println(nomeClicado);
//        String nomeBanco;
//
//        try{
//               //con_cidades.executeSQL("select * from usuario where (tipo_de_usuario = 'Gerente' or tipo_de_usuario = 'Operador') and (situacao = "+situacaoUsuario+") order by nome_usuario");
//               con_cidades.resultset.first();
//
//                while(igual.equals("n")){
//
//                     nomeBanco = con_cidades.resultset.getString("nome_cidade");
//
//                     if(nomeClicado.equals(nomeBanco)){
//                         tf_uf.setText(con_cidades.resultset.getString("uf_cidade"));
//                         mostrarDados();
//                         igual = "s";
//                     }
//                     else
//                         con_cidades.resultset.next();
//
//                }
//
//        }
//        catch(Exception e){
//
//            if(nomeClicado.equals(""))
//                return;
//
//
//        }
//
//}//fim selecao cliente na lista

public void pesquisarCidadeNome(){

    try{

        //TableModel modelo = (TableModel) CadastroClientee.tabelaCliente.getModel();
        con_cidades.resultset.first();
        String pesquisado, nPesquisado = "", uf_nome = "";
        String igual = "n";
        String nomePesquisado = tf_consulta.getText().toUpperCase();
        int tamanho_pesquisa  = tf_consulta.getText().length();
        int tamanho_pesquisado;


        while(igual.equals("n")){
        //teste para saber se o que foi pesquisado no banco tem a qtd de caracteres menor do que o que está sendo pesquisado
        tamanho_pesquisado = con_cidades.resultset.getString("nome_cidade").length();

            if(tamanho_pesquisado < tamanho_pesquisa)
                con_cidades.resultset.next();

            else{
                pesquisado = con_cidades.resultset.getString("nome_cidade").substring(0 , (tamanho_pesquisa));


                if(nomePesquisado.equals(pesquisado)){
                    nPesquisado = con_cidades.resultset.getString("nome_cidade");
                    igual = "s";//sai do laço e mostra dados
                }
                else
                    con_cidades.resultset.next();
            }
        }//fim while


        cb_listaCidades.setSelectedItem(nPesquisado);
        cb_listaCidades.requestFocus();

        //selecaoUF();
        mostrarDados();

    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null, "Não há registro compatível, verifique o nome digitado.");
    }

}

public void informaCidadeUF(){

try{
    String igual = "n";
    con_cidades.resultset.first();

    do{
            //se o nome do bairro que esta no banco for igual ao nome selecionado no congobox lista de bairros...
            if(con_cidades.resultset.getString("nome_cidade").equals(cb_listaCidades.getSelectedItem().toString())){
                mostrarDados();
                igual = "s";
            }
            else
                con_cidades.resultset.next();

    }while(igual.equals("n"));

}catch(Exception e){
        System.out.println("Erro :"+e);
}

}

public void habilitaBotoes(boolean h){

    btPrimeiro.setEnabled(h);
    btAnterior.setEnabled(h);
    btProximo.setEnabled(h);
    btUltimo.setEnabled(h);
    btExcluir.setEnabled(h);


}

}

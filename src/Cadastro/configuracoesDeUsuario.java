/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * configuracoesDeUsuario.java
 *
 * Created on 11/02/2010, 14:38:03
 */

package Cadastro;

import RelatorioForm.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import javax.swing.table.TableModel;
import auxiliar.conexao;
import auxiliar.validaLogin;

/**
 *
 * @author ayrton monier
 */
public class configuracoesDeUsuario extends javax.swing.JFrame {

    MaskFormatter formatoMat;
    public boolean extende = false;

    private conexao con_usuario;
    private String direcao;
    private int navega;
    private boolean grava;
    private String situacaoUsuario;
    public static boolean senhaAtualizada = false;
    public String dataFormatadataJTable;


    /** Creates new form configuracoesDeUsuario */
    public configuracoesDeUsuario() {
        initComponents();

        con_usuario = new conexao();
        con_usuario.conecta();

        situacaoUsuario = "'Ativo'";
        atualizaResultset();
        mostrarDados();
        preencherJtable();

        this.setSize(608, 420);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSituacao = new javax.swing.ButtonGroup();
        btPrimeiro = new javax.swing.JButton();
        btUltimo = new javax.swing.JButton();
        btAnterior = new javax.swing.JButton();
        mostraTabela = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaUsuario = new javax.swing.JTable();
        btTrocaSenha = new javax.swing.JButton();
        btProximo = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        btGrava = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btAcompanhaUsuario = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomeUsuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        codigo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tipoUsuario = new javax.swing.JComboBox();
        matriculaDoUsuario = new javax.swing.JFormattedTextField();
        confSenha = new javax.swing.JPasswordField();
        situacao = new javax.swing.JComboBox();
        confMatricula = new javax.swing.JButton();
        senha = new javax.swing.JPasswordField();
        contaSenha = new javax.swing.JLabel();
        contaConfSenha = new javax.swing.JLabel();
        contaMat = new javax.swing.JLabel();
        usuariosAtivos = new javax.swing.JToggleButton();
        todosUsuarios = new javax.swing.JToggleButton();
        listaUsuario = new javax.swing.JComboBox();
        UsuariosBloqueados = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Controle de operadores - Sistema Serquip 1.0");
        setIconImages(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btPrimeiro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/primeiro.png"))); // NOI18N
        btPrimeiro.setToolTipText("Primeiro registro");
        btPrimeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrimeiroActionPerformed(evt);
            }
        });

        btUltimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ultimo.png"))); // NOI18N
        btUltimo.setToolTipText("Último registro");
        btUltimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUltimoActionPerformed(evt);
            }
        });

        btAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/anterior.png"))); // NOI18N
        btAnterior.setToolTipText("Registro anterior");
        btAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnteriorActionPerformed(evt);
            }
        });

        mostraTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/mostraTabela.png"))); // NOI18N
        mostraTabela.setToolTipText("Mostrar tabela");
        mostraTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostraTabelaActionPerformed(evt);
            }
        });

        tabelaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Tipo", "Nome", "Matrícula", "Situacao", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaUsuarioMouseClicked(evt);
            }
        });
        tabelaUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaUsuarioKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaUsuario);

        btTrocaSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/senha.png"))); // NOI18N
        btTrocaSenha.setToolTipText("Trocar senha");
        btTrocaSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTrocaSenhaActionPerformed(evt);
            }
        });

        btProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/proximo.png"))); // NOI18N
        btProximo.setToolTipText("Próximo registro");
        btProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProximoActionPerformed(evt);
            }
        });

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/excluir.png"))); // NOI18N
        btExcluir.setMnemonic('b');
        btExcluir.setToolTipText("Excluir registro");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/adicionar.png"))); // NOI18N
        btNovo.setMnemonic('a');
        btNovo.setToolTipText("Novo registro");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btGrava.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/gravar.png"))); // NOI18N
        btGrava.setMnemonic('s');
        btGrava.setToolTipText("Salvar ou atualizar registro");
        btGrava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGravaActionPerformed(evt);
            }
        });

        btSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sair.png"))); // NOI18N
        btSair.setMnemonic('e');
        btSair.setToolTipText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aviso sobre senha de segurança", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/naoEncontreiBomb.png"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel7.setText("* A matrícula e a senha devem ter obrigatoriamente 8 dígitos");

        jLabel9.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel9.setText("* A matrícula e a senha são intransferíveis");

        jLabel10.setFont(new java.awt.Font("Arial Unicode MS", 0, 14)); // NOI18N
        jLabel10.setText("* A matrícula e a senha devem ser compostas somente por números");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6))
        );

        btAcompanhaUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/acompanhaUser.png"))); // NOI18N
        btAcompanhaUsuario.setToolTipText("Consulta de usuário");
        btAcompanhaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAcompanhaUsuarioActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel5.setText("Tipo de Usuário:");

        jLabel2.setText("Senha:");

        nomeUsuario.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N

        jLabel4.setText("Matrícula:");

        jLabel3.setText("Confirmar Senha:");

        jLabel1.setText("Nome do Usuário:");

        jLabel11.setText("Situação:");

        codigo.setEditable(false);
        codigo.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N

        jLabel8.setText("Código:");

        tipoUsuario.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        tipoUsuario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Operador", "Gerente", "Administrador" }));
        tipoUsuario.setEnabled(false);
        tipoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoUsuarioActionPerformed(evt);
            }
        });

        matriculaDoUsuario.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        matriculaDoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaDoUsuarioActionPerformed(evt);
            }
        });
        matriculaDoUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matriculaDoUsuarioKeyReleased(evt);
            }
        });

        confSenha.setEditable(false);
        confSenha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        confSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                confSenhaKeyReleased(evt);
            }
        });

        situacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        situacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Bloqueado" }));
        situacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                situacaoActionPerformed(evt);
            }
        });

        confMatricula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ok22.png"))); // NOI18N
        confMatricula.setEnabled(false);
        confMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confMatriculaActionPerformed(evt);
            }
        });

        senha.setEditable(false);
        senha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        senha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                senhaKeyReleased(evt);
            }
        });

        contaSenha.setText("(0)");

        contaConfSenha.setText("(0)");

        contaMat.setText("(0)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contaSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contaMat, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeUsuario)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(senha, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(16, 16, 16)
                        .addComponent(contaConfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(matriculaDoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(confMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(situacao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(codigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(contaMat))
                    .addComponent(jLabel11)
                    .addComponent(confMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matriculaDoUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(situacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(nomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(contaSenha))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(contaConfSenha))
                    .addComponent(confSenha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(senha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap())
        );

        bgSituacao.add(usuariosAtivos);
        usuariosAtivos.setSelected(true);
        usuariosAtivos.setText("Ativos");
        usuariosAtivos.setToolTipText("Usuários ativos");
        usuariosAtivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosAtivosActionPerformed(evt);
            }
        });

        bgSituacao.add(todosUsuarios);
        todosUsuarios.setText("Todos");
        todosUsuarios.setToolTipText("Todos usuário");
        todosUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todosUsuariosActionPerformed(evt);
            }
        });

        listaUsuario.setToolTipText("Lista de usuários");
        listaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaUsuarioActionPerformed(evt);
            }
        });

        bgSituacao.add(UsuariosBloqueados);
        UsuariosBloqueados.setText("Bloqueados");
        UsuariosBloqueados.setToolTipText("Usuários bloqueados");
        UsuariosBloqueados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuariosBloqueadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btPrimeiro, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(todosUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(usuariosAtivos, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btGrava, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(UsuariosBloqueados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAcompanhaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btTrocaSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSair, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mostraTabela))
                            .addComponent(listaUsuario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mostraTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btUltimo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btGrava, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btProximo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPrimeiro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btTrocaSenha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAcompanhaUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usuariosAtivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UsuariosBloqueados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listaUsuario))
                    .addComponent(todosUsuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void btPrimeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrimeiroActionPerformed

        if(codigo.getText().isEmpty() && (nomeUsuario.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "primeiro";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "primeiro";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btPrimeiroActionPerformed

    private void btUltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUltimoActionPerformed
        if(codigo.getText().isEmpty() && (nomeUsuario.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "ultimo";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "ultimo";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btUltimoActionPerformed

    private void btAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAnteriorActionPerformed
        navega = 1;
        if(codigo.getText().isEmpty() && (nomeUsuario.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){
                //posição do registro
                direcao = "primeiro";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{
                return;
            }
        } else{
            //posição do registro
            direcao = "anterior";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btAnteriorActionPerformed

    private void mostraTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostraTabelaActionPerformed
//        if(mostraTabela.getText().equals(">>")){
//            this.setSize(608, 570);
//            mostraTabela.setText("<<");
//        } else{
//            this.setSize(608, 420);
//            mostraTabela.setText(">>");
//        }

        //extende ou nao o formulário
        if(extende == false){
            this.setSize(608, 570);
            extende = true;
            mostraTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/escondeTabela.png")));
            mostraTabela.setToolTipText("Esconder tabela");

        }
        else{
            this.setSize(608, 420);
            extende = false;
            mostraTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/mostraTabela.png")));
            mostraTabela.setToolTipText("Mostrar tabela");
        }
}//GEN-LAST:event_mostraTabelaActionPerformed

    private void tabelaUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaUsuarioMouseClicked
        if(codigo.getText().isEmpty()){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será subistituído pelo registro que você clicou. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION)
                cliqueGrid();

            else{
               requestFocus();
               return;
            }
        }
        else
            cliqueGrid();
}//GEN-LAST:event_tabelaUsuarioMouseClicked

    private void tabelaUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaUsuarioKeyReleased
        cliqueGrid();
    }//GEN-LAST:event_tabelaUsuarioKeyReleased

    private void btTrocaSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTrocaSenhaActionPerformed
        if(codigo.getText().isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione um registro através dos botões de navegação", "Aviso", JOptionPane.WARNING_MESSAGE);
        else if(situacaoUsuario.equals("'Bloqueado'"))
            JOptionPane.showMessageDialog(null, "Usuário encontra - se bloqueado e não pode trocar a senha.", "Aviso", JOptionPane.WARNING_MESSAGE);

        else{
            trocaSenha ts = new trocaSenha(new javax.swing.JFrame(), true);
            ts.matricula.setText(matriculaDoUsuario.getText());
            ts.matricula.setEditable(false);
            ts.operador.setText(this.nomeUsuario.getText());
            ts.senha.setEditable(true);
            ts.confSenha.setEditable(true);
            ts.senha.requestFocus();
            ts.setVisible(true);

            if(senhaAtualizada == true){
                atualizaResultset();
                mostrarDados();
                preencherJtable();
            }
        }
    }//GEN-LAST:event_btTrocaSenhaActionPerformed

    private void btProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProximoActionPerformed
        navega = 2;
        if(codigo.getText().isEmpty() && (nomeUsuario.getText().length()>0)){
            int opc = JOptionPane.showConfirmDialog(null, "O registro atual será apagado. Deseja continuar?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if(opc == JOptionPane.YES_OPTION){//se apertar em sim
                //posição do registro
                direcao = "proximo";
                //chama o metodo que resolve a navegação dos botoes
                btNavega();

            } else{//se apertar em não
                return;
            }
        } else{
            //posição do registro
            direcao = "proximo";
            //chama o metodo que resolve a navegação dos botoes
            btNavega();

        }
}//GEN-LAST:event_btProximoActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        if(codigo.getText().isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione um registro através dos botoes de navegação", "Aviso", JOptionPane.WARNING_MESSAGE);
        else
            excluirRegistro();
}//GEN-LAST:event_btExcluirActionPerformed

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        novoUsuario();
    }//GEN-LAST:event_btNovoActionPerformed

    private void btGravaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGravaActionPerformed

        validaCampos();

        //se grava for verdadeiro(gravou no bd);
        if(grava == true){

            //sem caixa de texto onde tem o cod do cliente estiver vazia grava os dados
            if(codigo.getText().isEmpty())
                gravaDados();

            else{

                int opcao = JOptionPane.showConfirmDialog(null, "Deseja atualizar o cadastro?", "Confirmação", JOptionPane.YES_NO_OPTION);

                if(opcao == JOptionPane.YES_OPTION)
                    atualizaDados();
                else
                    return;
            }
        }//fim 1° if
    }//GEN-LAST:event_btGravaActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_usuario.desconecta();
            dispose();
        } else
            return;
}//GEN-LAST:event_btSairActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        JOptionPane.showMessageDialog(null, "clicou");
}//GEN-LAST:event_jLabel6MouseClicked

    private void btAcompanhaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAcompanhaUsuarioActionPerformed
        if(codigo.getText().isEmpty())
            JOptionPane.showMessageDialog(null, "Selecione um registro através dos botões de navegação", "Aviso", JOptionPane.WARNING_MESSAGE);
        else if(tipoUsuario.getSelectedItem().equals("Gerente") || tipoUsuario.getSelectedItem().equals("Administrador")){
            JOptionPane.showMessageDialog(null, "Este tipo de usuário não faz pesagem", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else
            acompanhaUsuario();
}//GEN-LAST:event_btAcompanhaUsuarioActionPerformed

    private void matriculaDoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaDoUsuarioActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_matriculaDoUsuarioActionPerformed

    private void matriculaDoUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matriculaDoUsuarioKeyReleased
        try{

            if(matriculaDoUsuario.getText().toString().length() > 8){
                matriculaDoUsuario.setText(matriculaDoUsuario.getText().substring(0, 8));
                return;
            } else if(matriculaDoUsuario.getText().isEmpty())
                contaMat.setText("(0)");
            else
                contaMat.setText("("+matriculaDoUsuario.getText().toString().length()+")");
        }catch(Exception e){

            JOptionPane.showMessageDialog(null, "Digite apenas números", "Aviso", JOptionPane.WARNING_MESSAGE);

        }
}//GEN-LAST:event_matriculaDoUsuarioKeyReleased

    private void confSenhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confSenhaKeyReleased
        if(confSenha.getText().toString().length() > 8){
            confSenha.setText(confSenha.getText().substring(0, 8));
            return;
        } else if(confSenha.getText().isEmpty())
            contaConfSenha.setText("(0)");
        else
            contaConfSenha.setText("("+confSenha.getText().toString().length()+")");
}//GEN-LAST:event_confSenhaKeyReleased

    private void confMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confMatriculaActionPerformed
        if(matriculaDoUsuario.getText().isEmpty() || matriculaDoUsuario.getText().length() < 8){
            JOptionPane.showMessageDialog(null, "preencha o campo de matricula (8 números) e depois confirme a disponibilidade", "Aviso", JOptionPane.WARNING_MESSAGE);
            matriculaDoUsuario.requestFocus();
        } else{
            verificaMatricula();
            contaMat.setText("(0)");
        }
}//GEN-LAST:event_confMatriculaActionPerformed

    private void senhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_senhaKeyReleased
        if(senha.getText().toString().length() > 8){
            senha.setText(senha.getText().substring(0, 8));
            return;
        } else if(senha.getText().isEmpty())
            contaSenha.setText("(0)");
        else
            contaSenha.setText("("+senha.getText().toString().length()+")");
}//GEN-LAST:event_senhaKeyReleased

    private void usuariosAtivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosAtivosActionPerformed
        situacaoUsuario = "'Ativo'";

        atualizaResultset();
        mostrarDados();
        preencherJtable();
}//GEN-LAST:event_usuariosAtivosActionPerformed

    private void todosUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todosUsuariosActionPerformed
        situacaoUsuario = "'Ativo' or situacao = 'Bloqueado'";
        
        atualizaResultset();
        mostrarDados();
        preencherJtable();
}//GEN-LAST:event_todosUsuariosActionPerformed

    private void listaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaUsuarioActionPerformed
        if(listaUsuario.getItemCount() == 0)
            return;
        else{
            selecaoClienteLista();
        }


}//GEN-LAST:event_listaUsuarioActionPerformed

    private void UsuariosBloqueadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuariosBloqueadosActionPerformed
        situacaoUsuario = "'Bloqueado'";
        atualizaResultset();
        mostrarDados();
        preencherJtable();
    }//GEN-LAST:event_UsuariosBloqueadosActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?", "Sair", JOptionPane.YES_NO_OPTION);

        if(opcao_escolhida == JOptionPane.YES_OPTION){
            con_usuario.desconecta();
            dispose();
        } else
            return;
    }//GEN-LAST:event_formWindowClosing

    private void situacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_situacaoActionPerformed
        if(situacao.getSelectedItem().toString().equals("Ativo"))
            btGrava.setEnabled(true);
    }//GEN-LAST:event_situacaoActionPerformed

    private void tipoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoUsuarioActionPerformed
        if(tipoUsuario.getSelectedItem().toString().equals("Operador"))
            btAcompanhaUsuario.setEnabled(true);
        else
            btAcompanhaUsuario.setEnabled(false);

    }//GEN-LAST:event_tipoUsuarioActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new configuracoesDeUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton UsuariosBloqueados;
    private javax.swing.ButtonGroup bgSituacao;
    private javax.swing.JButton btAcompanhaUsuario;
    private javax.swing.JButton btAnterior;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btGrava;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btPrimeiro;
    private javax.swing.JButton btProximo;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btTrocaSenha;
    private javax.swing.JButton btUltimo;
    private javax.swing.JTextField codigo;
    private javax.swing.JButton confMatricula;
    private javax.swing.JPasswordField confSenha;
    private javax.swing.JLabel contaConfSenha;
    private javax.swing.JLabel contaMat;
    private javax.swing.JLabel contaSenha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox listaUsuario;
    private javax.swing.JFormattedTextField matriculaDoUsuario;
    private javax.swing.JButton mostraTabela;
    private javax.swing.JTextField nomeUsuario;
    private javax.swing.JPasswordField senha;
    private javax.swing.JComboBox situacao;
    public static javax.swing.JTable tabelaUsuario;
    public javax.swing.JComboBox tipoUsuario;
    private javax.swing.JToggleButton todosUsuarios;
    private javax.swing.JToggleButton usuariosAtivos;
    // End of variables declaration//GEN-END:variables

public void limpaCampos(){

         //limpa todos os campos do cadastro de bombonas

         matriculaDoUsuario.setText("");
         nomeUsuario.setText("");
         senha.setText("");
         confSenha.setText("");
         codigo.setText("");
         situacao.setSelectedItem("Ativo");
         contaSenha.setText("(0)");
         contaConfSenha.setText("(0)");
         contaMat.setText("(0)");

}

//GRAVA OS DADOS DE PESO BOMBONA
public void gravaDados(){
try{

String sqlInsert = "insert into usuario (matricula_usuario" +
            ", nome_usuario" +
            ", senha_usuario" +
            ", situacao" +
            ", data_cad_usuario" +
            ", tipo_de_usuario) " +
            //valores dos campos
            "values ("+matriculaDoUsuario.getText()+                          //matricula
            ", '"+nomeUsuario.getText().toUpperCase()+"'"+           //nome do usuario
            ", PASSWORD('"+senha.getText()+"')"+                               //senha
            ", '"+situacao.getSelectedItem()+"'"+                    //situacao
            ", '"+validaLogin.DATAFORMAT+"'"+                        //data
            ", '"+tipoUsuario.getSelectedItem().toString()+"')";     //tipo de usuario


    int gravado = con_usuario.statement.executeUpdate(sqlInsert);

    //se conseguiu gravar, retorna 1 e entra no if
    if(gravado == 1){
    JOptionPane.showMessageDialog(null, "GRAVAÇÃO EFETUADA COM SUCESSO.");

        limpaCampos();
        atualizaResultset();
        mostrarDados();
        preencherJtable();//atualiza tabela

    }
}//fim try

catch(Exception e){
    JOptionPane.showMessageDialog(null, "ERRO AO TENTAR GRAVAR O REGISTRO. Erro:"+e, "erro", JOptionPane.ERROR_MESSAGE);
}


}//fim grava dados

public void preencherJtable(){


tabelaUsuario.getColumnModel().getColumn(0).setPreferredWidth(75);
tabelaUsuario.getColumnModel().getColumn(1).setPreferredWidth(75);
tabelaUsuario.getColumnModel().getColumn(2).setPreferredWidth(190);


//instancia do objeto modelo da classe defaultTableModel para receber o modelo da minha tabela para manuzear-mos

DefaultTableModel modelo = (DefaultTableModel) tabelaUsuario.getModel();
modelo.setNumRows(0);//toda vez que o metodo é chamado ele zera o num de lihas para preencher logo abaixo com novos dados

    try {

        con_usuario.resultset.first();
        do{
                //formatada a data do banco para dd/mm/aaaa para mostrar na tabela
                formataDataBancoParaJTable(con_usuario.resultset.getString("data_cad_usuario"));

                //equivale a uma linha na minha tabela Bombona
                modelo.addRow(new Object[]{con_usuario.resultset.getString("cod_usuario"),//codigo
                                           con_usuario.resultset.getString("tipo_de_usuario"),//tipo
                                           con_usuario.resultset.getString("nome_usuario"),//nome
                                           con_usuario.resultset.getString("matricula_usuario"),//matricula
                                           con_usuario.resultset.getString("situacao"),//situacao
                                           dataFormatadataJTable});//Data


        }while(con_usuario.resultset.next());//enquanto tiver dados preenche o jtable com os valores

                //depois que finaliza atualiza o resultset
                atualizaResultset();
                //preeche a lista de usuários

                
    }

    catch (Exception e) {
        //JOptionPane.showMessageDialog(null, "Não há dados para preencher a tabela. \nErro:"+e);
        modelo = (DefaultTableModel) tabelaUsuario.getModel();
        modelo.setNumRows(0);
    }



}//fim preencherJtable

public void atualizaResultset(){
try{

if(validaLogin.USUARIO.equals("Gerente")){

    con_usuario.executeSQL("select * from usuario where tipo_de_usuario = 'Operador' and (situacao = "+situacaoUsuario+") order by nome_usuario");
    con_usuario.resultset.first();



 }
else if(validaLogin.USUARIO.equals("Administrador")){

    //o gerente só poderá cadastrar operador
    tipoUsuario.setEnabled(true);

    con_usuario.executeSQL("select * from usuario where (situacao = "+situacaoUsuario+") order by nome_usuario ");
    con_usuario.resultset.first();



}

    preencherLista();

}
catch(Exception e){

  JOptionPane.showMessageDialog(null, "Não atualizado, tente novamente.Erro:"+e);

}

}//fim atualiza resultSet

public void formataDataBancoParaJTable(String data){
String dia, mes, ano;

        ano = data.substring(0, 4);
        mes = data.substring(5, 7);
        dia = data.substring(8, 10);

        dataFormatadataJTable = dia+"-"+mes+"-"+ano;

}//fim convert area text

public void btNavega(){
        try{


            if(direcao.equals("primeiro"))
                con_usuario.resultset.first();

            else if(direcao.equals("anterior"))
                con_usuario.resultset.previous();

            else if(direcao.equals("proximo"))
                con_usuario.resultset.next();

            else
                con_usuario.resultset.last();

            //mostra os dados
            mostrarDados();
        }
        catch(Exception e){

        }
}

public void mostrarDados(){
            try{


                //inabilita campos de senha e matricula e conf matricula
                matriculaDoUsuario.setEditable(false);
                senha.setEditable(false);
                confSenha.setEditable(false);
                senha.setText("");
                confSenha.setText("");
                confMatricula.setEnabled(false);
                contaSenha.setText("(0)");
                contaConfSenha.setText("(0)");
                contaMat.setText("(0)");

                
                codigo.setText(con_usuario.resultset.getString("cod_usuario"));
                tipoUsuario.setSelectedItem(con_usuario.resultset.getString("tipo_de_usuario"));
                nomeUsuario.setText(con_usuario.resultset.getString("nome_usuario"));
                matriculaDoUsuario.setText(con_usuario.resultset.getString("matricula_usuario"));
                situacao.setSelectedItem(con_usuario.resultset.getString("situacao"));

                habilitaBotoesAtivos(true);
                navega = 0;


                if(situacao.getSelectedItem().equals("Bloqueado")){

                    nomeUsuario.setEditable(false);
                    btTrocaSenha.setEnabled(false);
                    btExcluir.setEnabled(false);
                    btGrava.setEnabled(false);

                }

                
            }
            catch(Exception e){

                if(navega == 1)
                    JOptionPane.showMessageDialog(null, "Você já está no primeiro registro", "Aviso", JOptionPane.WARNING_MESSAGE);
                else if(navega == 2)
                    JOptionPane.showMessageDialog(null, "Você já está no ultimo registro", "Aviso", JOptionPane.WARNING_MESSAGE);
                else{

                     limpaCampos();
                     listaUsuario.removeAllItems();
                     habilitaBotoesAtivos(false);

                    
                     if(usuariosAtivos.isSelected()){
                         
                        novoUsuario();
                        btGrava.setEnabled(true);
                        situacao.setEnabled(true);

                        if(usuariosAtivos.isSelected())
                            JOptionPane.showMessageDialog(null, "Não há usuário(s) ativo(s)", "Aviso", JOptionPane.WARNING_MESSAGE);
                        
                     }
                
                     else if(UsuariosBloqueados.isSelected()){
                         listaUsuario.removeAllItems();
                         btAcompanhaUsuario.setEnabled(false);
                         btNovo.setEnabled(true);
                         JOptionPane.showMessageDialog(null, "Não há usuário(s) bloqueado(s)", "Aviso", JOptionPane.WARNING_MESSAGE);
                        
                     }
                     else if(todosUsuarios.isSelected()){
                         listaUsuario.removeAllItems();
                         btNovo.setEnabled(true);
                         JOptionPane.showMessageDialog(null, "Não há usuários(s) registrado(s)", "Aviso", JOptionPane.WARNING_MESSAGE);
                     }
                     else
                        JOptionPane.showMessageDialog(null, "Dados não localizados. \n\nErro: "+e, "Aviso", JOptionPane.WARNING_MESSAGE);
                    
                 }

                navega = 0;
            }

}//fim mostrar dados

public void excluirRegistro(){

    try{

            //faz uma busca no registro de peso de bombonas e vê se tem alguma referencia deste operador
            String sql = "select count(num_seq_bomb) as 'qtBombonas' from cad_bombona where matricula_usuario = "+matriculaDoUsuario.getText();
            con_usuario.executeSQL(sql);
            con_usuario.resultset.first();

            int qt_bombonas_pesadas = con_usuario.resultset.getInt("qtBombonas");//tq de bombonas registradas por esse usuário


            //faz uma busca no registro de incineração e vê se tem alguma referencia deste operador
            sql = "select count(num_seq_incineracao) as 'qtInci' from incineracao where matricula_usuario = "+matriculaDoUsuario.getText();
            con_usuario.executeSQL(sql);
            con_usuario.resultset.first();

            int qt_incineracao = con_usuario.resultset.getInt("qtInci");//tq de bombonas registradas por esse usuário


            if(qt_bombonas_pesadas > 0 || qt_incineracao > 0){
                String n = "Este operador ja pesou "+qt_bombonas_pesadas+" bombonas e incinerou "+qt_incineracao+" carrinhos de resíduo\ne não poderá ser excluído. Ao invés de ser excluído, será bloqueado.\n\nDeseja bloquear este usuário?";

                    int op = JOptionPane.showConfirmDialog(null, n, "Bloquear cliente", JOptionPane.YES_NO_OPTION);

                    if(op == JOptionPane.YES_OPTION){

                            situacao.setSelectedItem("Bloqueado");
                            atualizaDados();
                    }
                    else{
                            atualizaResultset();
                            return;
                    }


            }
            //se nao tiver nenhuma referência pode excluir
            else{

                    sql = "select * from usuario where cod_usuario = "+codigo.getText();
                    con_usuario.executeSQL(sql);
                    //posiciona no primeiro registro
                    con_usuario.resultset.first();

                    String nome = "Deletar o usuário: "+con_usuario.resultset.getString("nome_usuario");

                    int op = JOptionPane.showConfirmDialog(null, nome, "Deletar usuário", JOptionPane.YES_NO_OPTION);

                    if(op == JOptionPane.YES_OPTION){

                        sql = "DELETE FROM usuario WHERE cod_usuario ="+codigo.getText();

                        int conseguiu_excluir = con_usuario.statement.executeUpdate(sql);

                        if(conseguiu_excluir == 1){

                            JOptionPane.showMessageDialog(null, "Excluído com sucesso!");
                            atualizaResultset();
                            preencherJtable();
                            mostrarDados();
                       }
                    }
                    else{
                            atualizaResultset();

                            //preencherJtable();
                           // mostrarDados();

                            return;
                    }
          }//fim do else de teste de referencia na tabela de pesagem de bombona
        }//fim try
catch(Exception e){
    JOptionPane.showMessageDialog(null, "Erro ao tentar excluir o registro\nErro: "+e, "Erro", JOptionPane.ERROR_MESSAGE);
}
}//final excluir registro


public void atualizaDados(){

    String sql;
    try{

    sql = "UPDATE usuario SET tipo_de_usuario = '"+tipoUsuario.getSelectedItem()+"'" +
                            ", nome_usuario = '"+nomeUsuario.getText().toUpperCase()+"'" +
                            ", matricula_usuario = '"+matriculaDoUsuario.getText().toUpperCase()+"'" +
                            ", situacao = '"+situacao.getSelectedItem()+"'" +
                            " where cod_usuario = "+codigo.getText();


    con_usuario.statement.executeUpdate(sql);

    JOptionPane.showMessageDialog(null, "Atualização efetuada com sucesso!");

    atualizaResultset();
    mostrarDados();
    preencherJtable();

}//fim ry
catch(Exception e){
    JOptionPane.showMessageDialog(null, "Não foi possível atualizar o registro, verifique o que foi digitado nos campos\nErro: "+e, "Erro", JOptionPane.ERROR_MESSAGE);
}
}//fim atualiza dados

public void preencherLista(){

       // con_usuario.executeSQL("select * from usuario where tipo_de_usuario = 'Operador' and situacao = "+situacaoUsuario+" order by nome_usuario");

        //remove todos os itens
        listaUsuario.removeAllItems();

        try{
            con_usuario.resultset.first();

        do{
            listaUsuario.addItem(con_usuario.resultset.getString("nome_usuario"));

        }while(con_usuario.resultset.next());

        //VOLTA AO PRIMEIRO REGISTRO
        con_usuario.resultset.first();

    }

    catch(Exception e){

           //remove todos os itens
           listaUsuario.removeAllItems();

    }

}//fim preenche lista

public void validaCampos(){
        String msg = "";
        grava = false;


        if(matriculaDoUsuario.getText().isEmpty() || matriculaDoUsuario.getText().length() < 8){
            msg = "Informe a matrícula do "+tipoUsuario.getSelectedItem()+" (8 números)";
            matriculaDoUsuario.requestFocus();
            grava = false;
        }

        else if(confMatricula.isEnabled() == true){
            msg = "Confirme a disponibilidade da matrícula";
            matriculaDoUsuario.requestFocus();
            grava = false;
        }

        else if(nomeUsuario.getText().isEmpty()){
            msg = "Informe o nome do "+tipoUsuario.getSelectedItem();
            nomeUsuario.requestFocus();
            grava = false;
        }

        else if((senha.getText().isEmpty() || senha.getText().length() < 8) && senha.isEditable()){
            msg = "Informe a senha (8 números)";
            senha.requestFocus();
            grava = false;
        }
        else if((confSenha.getText().isEmpty() || confSenha.getText().length() < 8) && confSenha.isEditable() ){
            msg = "Confirme a sua senha (8 números)";
            confSenha.requestFocus();
            grava = false;
        }
        else if(senha.getText().length() > 0 && confSenha.getText().length() > 0){

            if(senha.getText().equals(confSenha.getText()))
                grava = true;

            else{
            msg = "Senhas incompatíveis, tente outra vez";
            senha.setText("");
            confSenha.setText("");
            contaSenha.setText("(0)");
            contaConfSenha.setText("(0)");
            senha.requestFocus();
            grava = false;
            }
        }

        else
            grava = true;//altoriza a gravação


        if(grava == false){
            JOptionPane.showMessageDialog(null, msg, "Aviso", JOptionPane.WARNING_MESSAGE);

        }
}//fim valida matricula

public void verificaMatricula(){

    String matriculaPesquisada;
    String matriculaNovoUsuario = matriculaDoUsuario.getText();
    boolean usada = true;
    try{

            Integer.parseInt(matriculaDoUsuario.getText());

            con_usuario.executeSQL("select * from usuario");
            con_usuario.resultset.first();

            do{

               matriculaPesquisada = con_usuario.resultset.getString("matricula_usuario");

               if(matriculaNovoUsuario.equals(matriculaPesquisada)){
                  usada = false;
                  break;
               }


            }while(con_usuario.resultset.next());


               if(usada == true){
                   JOptionPane.showMessageDialog(null, "Matrícula aceita.");
                   matriculaDoUsuario.setEditable(false);
                   confMatricula.setEnabled(false);
                   nomeUsuario.requestFocus();
               }

               else{
                  JOptionPane.showMessageDialog(null, "Esta matrícula ja está em uso. Escolha outra", "Matricula ja existe", JOptionPane.WARNING_MESSAGE);
                  matriculaDoUsuario.requestFocus();
                  matriculaDoUsuario.setValue("");

               }


            //VOLTA AO PRIMEIRO REGISTRO
            con_usuario.resultset.first();

    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null, "A matrícula deve ser composta obrigatoriamente por 8 números", "Aviso", JOptionPane.WARNING_MESSAGE);
        matriculaDoUsuario.setText("");
        matriculaDoUsuario.requestFocus();
    }
}

public void cliqueGrid(){
    //pega a linha que foi clicada na TABELA
    int linha = tabelaUsuario.getSelectedRow();
    //pega o modelo da tabela
    TableModel modelo = (TableModel) tabelaUsuario.getModel();
    //pega o codigo do cliente que está na linha que foi clicada e coluna 0 (primeira)
    String codigoUsuarioClicado =String.valueOf(modelo.getValueAt(linha, 0));
    //var que vai gurdar o codigo pesquisado no banco
    String codigoUsuarioPesquisado;
    //vai determinar o fim do laço
    String igual = "n";



    try{
            //vai para o primeiro registro
            con_usuario.resultset.first();

            while(igual.equals("n")){

                codigoUsuarioPesquisado = con_usuario.resultset.getString("cod_usuario");

                //se o codigo que foi clicado na gride for igual ao que está no banco
                if(codigoUsuarioClicado.equals(codigoUsuarioPesquisado)){
                    mostrarDados();
                    igual = "s";//sai do laço e mostra dados
                }
                else
                    con_usuario.resultset.next();

            }
    }//fim try

    catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
    }

}//fim click grid

public void selecaoClienteLista(){

        String igual = "n";
        String nomeClicado = listaUsuario.getSelectedItem().toString();
        //System.out.println(nomeClicado);
        String nomeBanco;

        try{
               //con_usuario.executeSQL("select * from usuario where (tipo_de_usuario = 'Gerente' or tipo_de_usuario = 'Operador') and (situacao = "+situacaoUsuario+") order by nome_usuario");
               con_usuario.resultset.first();

                while(igual.equals("n")){

                     nomeBanco = con_usuario.resultset.getString("nome_usuario");

                     if(nomeClicado.equals(nomeBanco)){
                         mostrarDados();
                         igual = "s";
                     }
                     else
                         con_usuario.resultset.next();

                }

        }
        catch(Exception e){

            if(nomeClicado.equals(""))
                return;


        }

}//fim selecao cliente na lista

public void acompanhaUsuario(){

int qtBomb, qtInci;

        try{
        con_usuario.executeSQL("select count(contrato) as 'total bombonas' from cad_bombona where matricula_usuario = "+matriculaDoUsuario.getText());
        con_usuario.resultset.first();
        qtBomb = con_usuario.resultset.getInt("total bombonas");

        con_usuario.executeSQL("select count(matricula_usuario) as 'total incineracao' from incineracao where matricula_usuario = "+matriculaDoUsuario.getText());
        con_usuario.resultset.first();
        qtInci = con_usuario.resultset.getInt("total incineracao");


        if(qtBomb == 0 && qtInci == 0){
            JOptionPane.showMessageDialog(null, "Usuário ainda não efetuou nenhum tipo pesagem", "Aviso", JOptionPane.WARNING_MESSAGE);

        }
        else if(qtBomb > 0){

            acompanhamentoPesagemUsuarioBombona acomUsuario = new acompanhamentoPesagemUsuarioBombona();
            acomUsuario.matriculaUsuarioBomb.setText(matriculaDoUsuario.getText());
            acomUsuario.pesquisaUsuarioBomb();
            acomUsuario.validaCampos();
            acomUsuario.configuraParaPesquisa();
            acomUsuario.setVisible(true);

        }
        else if(qtInci > 0){

            acompanhamentoPesagemUsuarioIncineracao inciUsuario = new acompanhamentoPesagemUsuarioIncineracao();
            inciUsuario.matriculaUsuarioInci.setText(matriculaDoUsuario.getText());
            inciUsuario.pesquisaUsuarioInci();
            inciUsuario.validaCampos();
            inciUsuario.configuraParaPesquisa();
            inciUsuario.setVisible(true);

        }

        atualizaResultset();

        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível mostrar a tela de acompanhamento de operador.\nErro: "+e);
            atualizaResultset();

        }
}

public void habilitaBotoesAtivos(boolean h){

    btPrimeiro.setEnabled(h);
    btAnterior.setEnabled(h);
    btProximo.setEnabled(h);
    btUltimo.setEnabled(h);
    btNovo.setEnabled(h);
    btExcluir.setEnabled(h);
    btTrocaSenha.setEnabled(h);
    //listaUsuario.setEnabled(h);
    nomeUsuario.setEditable(h);
    btGrava.setEnabled(h);
    //tipoUsuario.setEnabled(h);
    situacao.setEnabled(h);

}

public void novoUsuario(){

        situacaoUsuario = "'Ativo'";
        usuariosAtivos.setSelected(true);
        atualizaResultset();
        preencherJtable();

        limpaCampos();       
        senha.setEditable(true);
        confSenha.setEditable(true);
        matriculaDoUsuario.setEditable(true);
        confMatricula.setEnabled(true);
        matriculaDoUsuario.requestFocus();

        //inabilita os botoes
        habilitaBotoesAtivos(false);

        btGrava.setEnabled(true);
        nomeUsuario.setEditable(true);
        btAcompanhaUsuario.setEnabled(false);
}

}

